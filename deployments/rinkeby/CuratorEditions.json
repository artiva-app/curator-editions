{
  "address": "0x2031144a58D6D2d5E5AFb1c7BE14036C5e74003f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_singleEditionMintableCreatorAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentSplitterFactoryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "editionContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "editionId",
          "type": "uint256"
        }
      ],
      "name": "CreatedEdition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "editionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "EditionSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "editionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PriceChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NATIVE_CURRENCY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "animationUrl",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "animationHash",
              "type": "bytes32"
            },
            {
              "internalType": "string",
              "name": "imageUrl",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "imageHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "editionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "royaltyBPS",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "salePrice",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "internalType": "struct CuratorEditions.EditionData",
          "name": "_editionData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "title",
              "type": "string"
            },
            {
              "internalType": "address[]",
              "name": "payees",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct CuratorEditions.SplitData",
          "name": "_splitData",
          "type": "tuple"
        }
      ],
      "name": "createCuratorEdition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "editionIdToSalePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "editionIdToSplitter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_editionId",
          "type": "uint256"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_editionId",
          "type": "uint256"
        }
      ],
      "name": "getEditionAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentSplitterFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_editionId",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_editionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "setSalePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "singleEditionMintableCreatorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_editionId",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb11ab0945f30226316cf76bfdeb4450b7de3933ba904d39d7b2706550220ff1",
  "receipt": {
    "to": null,
    "from": "0xD71f2a53c3BfeD48770a6780fc6c297B8974c6a0",
    "contractAddress": "0x2031144a58D6D2d5E5AFb1c7BE14036C5e74003f",
    "transactionIndex": 12,
    "gasUsed": "1706230",
    "logsBloom": "0x
    "blockHash": "0x3e638c7876c3ff1ad753355e36b576aa11987b4484fc4107b6238fedc1f5c714",
    "transactionHash": "0xcb11ab0945f30226316cf76bfdeb4450b7de3933ba904d39d7b2706550220ff1",
    "logs": [],
    "blockNumber": 9810031,
    "cumulativeGasUsed": "16321441",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3975b5ECF50986c0a2Cf899FFEc5A5e569429242",
    "0xF6A81fd3a0Ab1ba4b32E9D5F451a3B8E90933862"
  ],
  "solcInputHash": "bfe24d60c6b027c34e14f38319155c7b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_singleEditionMintableCreatorAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentSplitterFactoryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"editionContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"}],\"name\":\"CreatedEdition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EditionSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"editionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NATIVE_CURRENCY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"animationUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"animationHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"imageHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"editionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"royaltyBPS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"internalType\":\"struct CuratorEditions.EditionData\",\"name\":\"_editionData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CuratorEditions.SplitData\",\"name\":\"_splitData\",\"type\":\"tuple\"}],\"name\":\"createCuratorEdition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"editionIdToSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"editionIdToSplitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"}],\"name\":\"getEditionAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentSplitterFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"setSalePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"singleEditionMintableCreatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_editionId\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CuratorEditions.sol\":\"CuratorEditions\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@artiva/nft-editions-contracts/contracts/IEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\ninterface IEditionSingleMintable {\\n  function mintEdition(address to) external returns (uint256);\\n  function mintEditions(address[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\",\"keccak256\":\"0x8a09e65be621a4b0f7eb92337759d2ebe1152519d8f0606ad36d4ad497e0be59\",\"license\":\"GPL-3.0\"},\"@artiva/nft-editions-contracts/contracts/IPublicSharedMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\n/// Shared public library for on-chain NFT functions\\ninterface IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        external\\n        pure\\n        returns (string memory);\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        external\\n        pure\\n        returns (string memory);\\n}\\n\",\"keccak256\":\"0x06366259a2fb13f4c6adca23766db74eadab3dc89ad25773b9c1ff7fa64507da\",\"license\":\"GPL-3.0\"},\"@artiva/nft-editions-contracts/contracts/SharedNFTLogic.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.6;\\n\\nimport {StringsUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport {Base64} from \\\"base64-sol/base64.sol\\\";\\nimport {IPublicSharedMetadata} from \\\"./IPublicSharedMetadata.sol\\\";\\n\\n/// Shared NFT logic for rendering metadata associated with editions\\n/// @dev Can safely be used for generic base64Encode and numberToString functions\\ncontract SharedNFTLogic is IPublicSharedMetadata {\\n    /// @param unencoded bytes to base64-encode\\n    function base64Encode(bytes memory unencoded)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return Base64.encode(unencoded);\\n    }\\n\\n    /// Proxy to openzeppelin's toString function\\n    /// @param value number to return as a string\\n    function numberToString(uint256 value)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return StringsUpgradeable.toString(value);\\n    }\\n\\n    /// Generate edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param imageUrl URL of image to render for edition\\n    /// @param animationUrl URL of animation to render for edition\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataEdition(\\n        string memory name,\\n        string memory description,\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) external pure returns (string memory) {\\n        string memory _tokenMediaData = tokenMediaData(\\n            imageUrl,\\n            animationUrl,\\n            tokenOfEdition\\n        );\\n        bytes memory json = createMetadataJSON(\\n            name,\\n            description,\\n            _tokenMediaData,\\n            tokenOfEdition,\\n            editionSize\\n        );\\n        return encodeMetadataJSON(json);\\n    }\\n\\n    /// Function to create the metadata json string for the nft edition\\n    /// @param name Name of NFT in metadata\\n    /// @param description Description of NFT in metadata\\n    /// @param mediaData Data for media to include in json object\\n    /// @param tokenOfEdition Token ID for specific token\\n    /// @param editionSize Size of entire edition to show\\n    function createMetadataJSON(\\n        string memory name,\\n        string memory description,\\n        string memory mediaData,\\n        uint256 tokenOfEdition,\\n        uint256 editionSize\\n    ) public pure returns (bytes memory) {\\n        bytes memory editionSizeText;\\n        if (editionSize > 0) {\\n            editionSizeText = abi.encodePacked(\\n                \\\"/\\\",\\n                numberToString(editionSize)\\n            );\\n        }\\n        return\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                name,\\n                \\\" \\\",\\n                numberToString(tokenOfEdition),\\n                editionSizeText,\\n                '\\\", \\\"',\\n                'description\\\": \\\"',\\n                description,\\n                '\\\", \\\"',\\n                mediaData,\\n                'properties\\\": {\\\"number\\\": ',\\n                numberToString(tokenOfEdition),\\n                ', \\\"name\\\": \\\"',\\n                name,\\n                '\\\"}}'\\n            );\\n    }\\n\\n    /// Encodes the argument json bytes into base64-data uri format\\n    /// @param json Raw json to base64 and turn into a data-uri\\n    function encodeMetadataJSON(bytes memory json)\\n        public\\n        pure\\n        override\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    base64Encode(json)\\n                )\\n            );\\n    }\\n\\n    /// Generates edition metadata from storage information as base64-json blob\\n    /// Combines the media data and metadata\\n    /// @param imageUrl URL of image to render for edition\\n    /// @param animationUrl URL of animation to render for edition\\n    function tokenMediaData(\\n        string memory imageUrl,\\n        string memory animationUrl,\\n        uint256 tokenOfEdition\\n    ) public pure returns (string memory) {\\n        bool hasImage = bytes(imageUrl).length > 0;\\n        bool hasAnimation = bytes(animationUrl).length > 0;\\n        if (hasImage && hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasImage) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'image\\\": \\\"',\\n                        imageUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n        if (hasAnimation) {\\n            return\\n                string(\\n                    abi.encodePacked(\\n                        'animation_url\\\": \\\"',\\n                        animationUrl,\\n                        \\\"?id=\\\",\\n                        numberToString(tokenOfEdition),\\n                        '\\\", \\\"'\\n                    )\\n                );\\n        }\\n\\n        return \\\"\\\";\\n    }\\n}\\n\",\"keccak256\":\"0x83e3bc6128feb3bffafbef4f9d6fc821853127e6f614bb3727560f6b043d4be2\",\"license\":\"GPL-3.0\"},\"@artiva/nft-editions-contracts/contracts/SingleEditionMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/**\\n\\n\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\u2580\\u2003\\u2580\\u2588\\u2580\\u2003 \\u2003\\u2588\\u2580\\u2580\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2003\\u2580\\u2588\\u2580\\u2003\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\n\\u2588\\u2591\\u2580\\u2588\\u2003\\u2588\\u2580\\u2591\\u2003\\u2591\\u2588\\u2591\\u2003 \\u2003\\u2588\\u2588\\u2584\\u2003\\u2588\\u2584\\u2580\\u2003\\u2588\\u2003\\u2591\\u2588\\u2591\\u2003\\u2588\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2591\\u2580\\u2588\\u2003\\u2584\\u2588\\n\\n\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2584\\u2580\\u2588\\n\\u2588\\u2584\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2580\\u2588\\n\\n */\\n\\npragma solidity 0.8.6;\\n\\nimport {ERC721Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport {IERC2981Upgradeable, IERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport {AddressUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport {SharedNFTLogic} from \\\"./SharedNFTLogic.sol\\\";\\nimport {IEditionSingleMintable} from \\\"./IEditionSingleMintable.sol\\\";\\n\\n/**\\n    This is a smart contract for handling dynamic contract minting.\\n\\n    @dev This allows creators to mint a unique serial edition of the same media within a custom contract\\n    @author iain nash\\n    Repository: https://github.com/ourzora/nft-editions\\n*/\\ncontract SingleEditionMintable is\\n    ERC721Upgradeable,\\n    IEditionSingleMintable,\\n    IERC2981Upgradeable,\\n    OwnableUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n    event PriceChanged(uint256 amount);\\n    event EditionSold(uint256 price, address owner);\\n    event FundsWithdrawn(uint256 amount);\\n\\n    // metadata\\n    string public description;\\n\\n    // Media Urls\\n    // animation_url field in the metadata\\n    string public animationUrl;\\n    // Hash for the associated animation\\n    bytes32 public animationHash;\\n    // Image in the metadata\\n    string public imageUrl;\\n    // Hash for the associated image\\n    bytes32 public imageHash;\\n\\n    // Total size of edition that can be minted\\n    uint256 public editionSize;\\n    // Current token id minted\\n    CountersUpgradeable.Counter private atEditionId;\\n    // Royalty amount in bps\\n    uint256 royaltyBPS;\\n    // Addresses allowed to mint edition\\n    mapping(address => bool) allowedMinters;\\n\\n    // Price for sale\\n    uint256 public salePrice;\\n\\n    // NFT rendering logic contract\\n    SharedNFTLogic private immutable sharedNFTLogic;\\n\\n    // Global constructor for factory\\n    constructor(SharedNFTLogic _sharedNFTLogic) {\\n        sharedNFTLogic = _sharedNFTLogic;\\n    }\\n\\n    /**\\n      @param _owner User that owns and can mint the edition, gets royalty and sales payouts and can update the base url if needed.\\n      @param _name Name of edition, used in the title as \\\"$NAME NUMBER/TOTAL\\\"\\n      @param _symbol Symbol of the new token contract\\n      @param _description Description of edition, used in the description field of the NFT\\n      @param _imageUrl Image URL of the edition. Strongly encouraged to be used, if necessary, only animation URL can be used. One of animation and image url need to exist in a edition to render the NFT.\\n      @param _imageHash SHA256 of the given image in bytes32 format (0xHASH). If no image is included, the hash can be zero.\\n      @param _animationUrl Animation URL of the edition. Not required, but if omitted image URL needs to be included. This follows the opensea spec for NFTs\\n      @param _animationHash The associated hash of the animation in sha-256 bytes32 format. If animation is omitted the hash can be zero.\\n      @param _editionSize Number of editions that can be minted in total. If 0, unlimited editions can be minted.\\n      @param _royaltyBPS BPS of the royalty set on the contract. Can be 0 for no royalty.\\n      @dev Function to create a new edition. Can only be called by the allowed creator\\n           Sets the only allowed minter to the address that creates/owns the edition.\\n           This can be re-assigned or updated later\\n     */\\n    function initialize(\\n        address _owner,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory _animationUrl,\\n        bytes32 _animationHash,\\n        string memory _imageUrl,\\n        bytes32 _imageHash,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS,\\n        uint256 _salePrice\\n    ) public initializer {\\n        __ERC721_init(_name, _symbol);\\n        __Ownable_init();\\n        // Set ownership to original sender of contract call\\n        setSalePrice(_salePrice);\\n        transferOwnership(_owner);\\n        description = _description;\\n        animationUrl = _animationUrl;\\n        animationHash = _animationHash;\\n        imageUrl = _imageUrl;\\n        imageHash = _imageHash;\\n        editionSize = _editionSize;\\n        royaltyBPS = _royaltyBPS;\\n        // Set edition id start to be 1 not 0\\n        atEditionId.increment();\\n    }\\n\\n    /// @dev returns the number of minted tokens within the edition\\n    function totalSupply() public view returns (uint256) {\\n        return atEditionId.current() - 1;\\n    }\\n\\n    /**\\n        Simple eth-based sales function\\n        More complex sales functions can be implemented through ISingleEditionMintable interface\\n     */\\n\\n    /**\\n      @dev This allows the user to purchase a edition edition\\n           at the given price in the contract.\\n     */\\n    function purchase() external payable returns (uint256) {\\n        require(salePrice > 0, \\\"Not for sale\\\");\\n        require(msg.value == salePrice, \\\"Wrong price\\\");\\n        address[] memory toMint = new address[](1);\\n        toMint[0] = msg.sender;\\n        emit EditionSold(salePrice, msg.sender);\\n        return _mintEditions(toMint);\\n    }\\n\\n    /**\\n      @param _salePrice if sale price is 0 sale is stopped, otherwise that amount \\n                       of ETH is needed to start the sale.\\n      @dev This sets a simple ETH sales price\\n           Setting a sales price allows users to mint the edition until it sells out.\\n           For more granular sales, use an external sales contract.\\n     */\\n    function setSalePrice(uint256 _salePrice) public onlyOwner {\\n        salePrice = _salePrice;\\n        emit PriceChanged(salePrice);\\n    }\\n\\n    /**\\n      @dev This withdraws ETH from the contract to the contract owner.\\n     */\\n    function withdraw() external onlyOwner {\\n        // No need for gas limit to trusted address.\\n        emit FundsWithdrawn(address(this).balance);\\n        AddressUpgradeable.sendValue(payable(owner()), address(this).balance);\\n    }\\n\\n    /**\\n      @dev This helper function checks if the msg.sender is allowed to mint the\\n            given edition id.\\n     */\\n    function _isAllowedToMint() internal view returns (bool) {\\n        if (owner() == msg.sender) {\\n            return true;\\n        }\\n        if (allowedMinters[address(0x0)]) {\\n            return true;\\n        }\\n        return allowedMinters[msg.sender];\\n    }\\n\\n    /**\\n      @param to address to send the newly minted edition to\\n      @dev This mints one edition to the given address by an allowed minter on the edition instance.\\n     */\\n    function mintEdition(address to) external override returns (uint256) {\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n        address[] memory toMint = new address[](1);\\n        toMint[0] = to;\\n        return _mintEditions(toMint);\\n    }\\n\\n    /**\\n      @param recipients list of addresses to send the newly minted editions to\\n      @dev This mints multiple editions to the given list of addresses.\\n     */\\n    function mintEditions(address[] memory recipients)\\n        external\\n        override\\n        returns (uint256)\\n    {\\n        require(_isAllowedToMint(), \\\"Needs to be an allowed minter\\\");\\n        return _mintEditions(recipients);\\n    }\\n\\n    /**\\n        Simple override for owner interface.\\n     */\\n    function owner()\\n        public\\n        view\\n        override(OwnableUpgradeable, IEditionSingleMintable)\\n        returns (address)\\n    {\\n        return super.owner();\\n    }\\n\\n    /**\\n      @param minter address to set approved minting status for\\n      @param allowed boolean if that address is allowed to mint\\n      @dev Sets the approved minting status of the given address.\\n           This requires that msg.sender is the owner of the given edition id.\\n           If the ZeroAddress (address(0x0)) is set as a minter,\\n             anyone will be allowed to mint.\\n           This setup is similar to setApprovalForAll in the ERC721 spec.\\n     */\\n    function setApprovedMinter(address minter, bool allowed) public onlyOwner {\\n        allowedMinters[minter] = allowed;\\n    }\\n\\n    /**\\n      @dev Allows for updates of edition urls by the owner of the edition.\\n           Only URLs can be updated (data-uris are supported), hashes cannot be updated.\\n     */\\n    function updateEditionURLs(\\n        string memory _imageUrl,\\n        string memory _animationUrl\\n    ) public onlyOwner {\\n        imageUrl = _imageUrl;\\n        animationUrl = _animationUrl;\\n    }\\n\\n    /// Returns the number of editions allowed to mint (max_uint256 when open edition)\\n    function numberCanMint() public view override returns (uint256) {\\n        // Return max int if open edition\\n        if (editionSize == 0) {\\n            return type(uint256).max;\\n        }\\n        // atEditionId is one-indexed hence the need to remove one here\\n        return editionSize + 1 - atEditionId.current();\\n    }\\n\\n    /**\\n        @param tokenId Token ID to burn\\n        User burn function for token id \\n     */\\n    function burn(uint256 tokenId) public {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Not approved\\\");\\n        _burn(tokenId);\\n    }\\n\\n    /**\\n      @dev Private function to mint als without any access checks.\\n           Called by the public edition minting functions.\\n     */\\n    function _mintEditions(address[] memory recipients)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 startAt = atEditionId.current();\\n        uint256 endAt = startAt + recipients.length - 1;\\n        require(editionSize == 0 || endAt <= editionSize, \\\"Sold out\\\");\\n        while (atEditionId.current() <= endAt) {\\n            _mint(\\n                recipients[atEditionId.current() - startAt],\\n                atEditionId.current()\\n            );\\n            atEditionId.increment();\\n        }\\n        return atEditionId.current();\\n    }\\n\\n    /**\\n      @dev Get URIs for edition NFT\\n      @return imageUrl, imageHash, animationUrl, animationHash\\n     */\\n    function getURIs()\\n        public\\n        view\\n        returns (\\n            string memory,\\n            bytes32,\\n            string memory,\\n            bytes32\\n        )\\n    {\\n        return (imageUrl, imageHash, animationUrl, animationHash);\\n    }\\n\\n    /**\\n        @dev Get royalty information for token\\n        @param _salePrice Sale price for the token\\n     */\\n    function royaltyInfo(uint256, uint256 _salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        if (owner() == address(0x0)) {\\n            return (owner(), 0);\\n        }\\n        return (owner(), (_salePrice * royaltyBPS) / 10_000);\\n    }\\n\\n    /**\\n        @dev Get URI for given token id\\n        @param tokenId token id to get uri for\\n        @return base64-encoded json metadata object\\n    */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"No token\\\");\\n\\n        return\\n            sharedNFTLogic.createMetadataEdition(\\n                name(),\\n                description,\\n                imageUrl,\\n                animationUrl,\\n                tokenId,\\n                editionSize\\n            );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Upgradeable, IERC165Upgradeable)\\n        returns (bool)\\n    {\\n        return\\n            type(IERC2981Upgradeable).interfaceId == interfaceId ||\\n            ERC721Upgradeable.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x5efb023b72d8fc3834ef8054a210c672769e4bd988db7df01c8e2af8fcf4f8ff\",\"license\":\"GPL-3.0\"},\"@artiva/nft-editions-contracts/contracts/SingleEditionMintableCreator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n/**\\n\\n\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\u2580\\u2003\\u2580\\u2588\\u2580\\u2003 \\u2003\\u2588\\u2580\\u2580\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2003\\u2580\\u2588\\u2580\\u2003\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2584\\u2591\\u2588\\u2003\\u2588\\u2580\\n\\u2588\\u2591\\u2580\\u2588\\u2003\\u2588\\u2580\\u2591\\u2003\\u2591\\u2588\\u2591\\u2003 \\u2003\\u2588\\u2588\\u2584\\u2003\\u2588\\u2584\\u2580\\u2003\\u2588\\u2003\\u2591\\u2588\\u2591\\u2003\\u2588\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2591\\u2580\\u2588\\u2003\\u2584\\u2588\\n\\n\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2588\\u2580\\u2588\\u2003\\u2584\\u2580\\u2588\\n\\u2588\\u2584\\u2003\\u2588\\u2584\\u2588\\u2003\\u2588\\u2580\\u2584\\u2003\\u2588\\u2580\\u2588\\n\\n */\\n\\npragma solidity 0.8.6;\\n\\nimport {ClonesUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\\\";\\nimport {CountersUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\nimport \\\"./SingleEditionMintable.sol\\\";\\n\\ncontract SingleEditionMintableCreator {\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    /// Counter for current contract id upgraded\\n    CountersUpgradeable.Counter private atContract;\\n\\n    /// Address for implementation of SingleEditionMintable to clone\\n    address public implementation;\\n\\n    /// Initializes factory with address of implementation logic\\n    /// @param _implementation SingleEditionMintable logic implementation contract to clone\\n    constructor(address _implementation) {\\n        implementation = _implementation;\\n    }\\n\\n    /// Creates a new edition contract as a factory with a deterministic address\\n    /// Important: None of these fields (except the Url fields with the same hash) can be changed after calling\\n    /// @param _name Name of the edition contract\\n    /// @param _symbol Symbol of the edition contract\\n    /// @param _description Metadata: Description of the edition entry\\n    /// @param _animationUrl Metadata: Animation url (optional) of the edition entry\\n    /// @param _animationHash Metadata: SHA-256 Hash of the animation (if no animation url, can be 0x0)\\n    /// @param _imageUrl Metadata: Image url (semi-required) of the edition entry\\n    /// @param _imageHash Metadata: SHA-256 hash of the Image of the edition entry (if not image, can be 0x0)\\n    /// @param _editionSize Total size of the edition (number of possible editions)\\n    /// @param _royaltyBPS BPS amount of royalty\\n    function createEdition(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory _animationUrl,\\n        bytes32 _animationHash,\\n        string memory _imageUrl,\\n        bytes32 _imageHash,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS,\\n        uint256 _salePrice\\n    ) external returns (uint256) {\\n        uint256 newId = atContract.current();\\n        address newContract = ClonesUpgradeable.cloneDeterministic(\\n            implementation,\\n            bytes32(abi.encodePacked(newId))\\n        );\\n        SingleEditionMintable(newContract).initialize(\\n            msg.sender,\\n            _name,\\n            _symbol,\\n            _description,\\n            _animationUrl,\\n            _animationHash,\\n            _imageUrl,\\n            _imageHash,\\n            _editionSize,\\n            _royaltyBPS,\\n            _salePrice\\n        );\\n\\n        emit CreatedEdition(newId, msg.sender, _editionSize, newContract);\\n        // Returns the ID of the recently created minting contract\\n        // Also increments for the next contract creation call\\n        atContract.increment();\\n        return newId;\\n    }\\n\\n    /// Get edition given the created ID\\n    /// @param editionId id of edition to get contract for\\n    /// @return SingleEditionMintable Edition NFT contract\\n    function getEditionAtId(uint256 editionId)\\n        external\\n        view\\n        returns (SingleEditionMintable)\\n    {\\n        return\\n            SingleEditionMintable(\\n                ClonesUpgradeable.predictDeterministicAddress(\\n                    implementation,\\n                    bytes32(abi.encodePacked(editionId)),\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /// Emitted when a edition is created reserving the corresponding token IDs.\\n    /// @param editionId ID of newly created edition\\n    event CreatedEdition(\\n        uint256 indexed editionId,\\n        address indexed creator,\\n        uint256 editionSize,\\n        address editionContractAddress\\n    );\\n}\\n\",\"keccak256\":\"0x6f1c823f7460213a323cd41c3a63866cf35150cfffa789a16698bb29501fa995\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xd8a3c09ad479d297be526fe6945ca29a018178ba04c2f35081a8dda7faedc7c8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xc88de28441ae0fbf215384ecbc12b675f862dcdf851daa5a6943cef4c91e4373\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ClonesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary ClonesUpgradeable {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x77233a86171e6b66e6b95ae5ae716d3ea5a8d190d5d075e9599fae96b7154fe1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x49915fbc84c030ba425312356c1a0a28f81cdee5ab637f7a264752b52243fec6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x8116b65b11e0a65ad6cf40cf2d71d2dacad80ddc37ad42af965fc919afb19e5f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5f8d2e5137f7603eeaa0516e5b40dc6e637f179edea8134f1dbef9754c9baf2b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe0091487bb0da2016b050e276b74e83a3a4fa641f65600558281a3dc3ef24994\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x704add6904e5156bac4fb870ee851af4c2d004ae0cac22fd030162843fd1d611\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xed12e1c10c09054954b16a1b1f4250c4bbc0c7140d720777626fb5886a1a0e25\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8c5737e80521ac5e76c0d9d2cdb67647906fdadeb296644910eeecb31042e1da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x650712f855228b7cdeb90738d99dd33ff3a7c9770914ff03eb93f90218fe164b\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/CuratorEditions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {ISingleEditionMintableCreator} from \\\"./interfaces/ISingleEditionMintableCreator.sol\\\";\\nimport {IPaymentSplitterFactory} from \\\"./interfaces/IPaymentSplitterFactory.sol\\\";\\nimport {IPaymentSplitter} from \\\"./interfaces/IPaymentSplitter.sol\\\";\\nimport {ISingleEditionMintable} from \\\"./interfaces/ISingleEditionMintable.sol\\\";\\nimport {SingleEditionMintable} from \\\"@artiva/nft-editions-contracts/contracts/SingleEditionMintable.sol\\\";\\nimport {SingleEditionMintableCreator} from \\\"@artiva/nft-editions-contracts/contracts/SingleEditionMintableCreator.sol\\\";\\nimport {SharedNFTLogic} from \\\"@artiva/nft-editions-contracts/contracts/SharedNFTLogic.sol\\\";\\n\\ncontract CuratorEditions {\\n    event CreatedEdition(address editionContractAddress, uint256 editionId);\\n    event PriceChanged(uint256 editionId, uint256 amount);\\n    event EditionSold(uint256 editionId, uint256 price, address owner);\\n\\n    struct EditionData {\\n        string name;\\n        string symbol;\\n        string description;\\n        string animationUrl;\\n        bytes32 animationHash;\\n        string imageUrl;\\n        bytes32 imageHash;\\n        uint256 editionSize;\\n        uint256 royaltyBPS;\\n        uint256 salePrice;\\n        address owner;\\n    }\\n\\n    struct SplitData {\\n        string title;\\n        address[] payees;\\n        uint256[] shares;\\n    }\\n\\n    address public constant NATIVE_CURRENCY = 0x0000000000000000000000000000000000000000;\\n    address public singleEditionMintableCreatorAddress;\\n    address public paymentSplitterFactoryAddress;\\n\\n    mapping(uint256 => address) public editionIdToSplitter;\\n    mapping(uint256 => uint256) public editionIdToSalePrice;\\n    \\n    constructor(address _singleEditionMintableCreatorAddress, address _paymentSplitterFactoryAddress) {\\n        singleEditionMintableCreatorAddress = _singleEditionMintableCreatorAddress;\\n        paymentSplitterFactoryAddress = _paymentSplitterFactoryAddress;\\n    }   \\n\\n    function createCuratorEdition(\\n        EditionData memory _editionData,\\n        SplitData memory _splitData\\n    ) external returns (uint256) {\\n        ISingleEditionMintableCreator creator = ISingleEditionMintableCreator(singleEditionMintableCreatorAddress);\\n        uint editionId = creator.createEdition(_editionData.name, _editionData.symbol, _editionData.description, _editionData.animationUrl, _editionData.animationHash, _editionData.imageUrl, _editionData.imageHash, _editionData.editionSize, _editionData.royaltyBPS, 0);\\n        address splitter = IPaymentSplitterFactory(paymentSplitterFactoryAddress).deployPaymentSplitter(msg.sender, _splitData.title, _splitData.payees, _splitData.shares);\\n\\n        ISingleEditionMintable edition = creator.getEditionAtId(editionId);\\n        edition.setApprovedMinter(address(this), true);\\n        edition.transferOwnership(_editionData.owner);\\n        editionIdToSplitter[editionId] = splitter;\\n        editionIdToSalePrice[editionId] = _editionData.salePrice;\\n\\n        emit CreatedEdition(address(edition), editionId);\\n        return (editionId);\\n    }\\n\\n    function purchase(uint256 _editionId) external payable returns (uint256) {\\n        address splitter = editionIdToSplitter[_editionId];\\n        uint256 salePrice = editionIdToSalePrice[_editionId];\\n        require(salePrice > 0, \\\"NOT_FOR_SALE\\\");\\n        require(msg.value == salePrice, \\\"INVALID_PRICE\\\");\\n\\n        ISingleEditionMintable edition = ISingleEditionMintableCreator(singleEditionMintableCreatorAddress).getEditionAtId(_editionId);\\n        uint256 editionIndex = edition.mintEdition(msg.sender);\\n        emit EditionSold(_editionId, salePrice, msg.sender);\\n        \\n        (bool sent,) = payable(splitter).call{value: msg.value}(\\\"\\\");\\n        require(sent, \\\"SPLITTER_ERROR\\\");\\n\\n        return editionIndex;\\n    }\\n\\n    function setSalePrice(uint256 _editionId, uint256 _salePrice) external {\\n        ISingleEditionMintableCreator creator = ISingleEditionMintableCreator(singleEditionMintableCreatorAddress);\\n        ISingleEditionMintable edition = creator.getEditionAtId(_editionId);\\n        require(msg.sender == edition.owner(), \\\"FORBIDDEN\\\");\\n        editionIdToSalePrice[_editionId] = _salePrice;\\n        emit PriceChanged(_editionId, _salePrice);\\n    }\\n\\n    function withdraw(uint256 _editionId) public {\\n        IPaymentSplitter(editionIdToSplitter[_editionId]).release(NATIVE_CURRENCY, msg.sender);\\n    }\\n\\n    function getBalance(uint256 _editionId) public view returns(uint256) {\\n        return IPaymentSplitter(editionIdToSplitter[_editionId]).getBalance(NATIVE_CURRENCY, msg.sender);\\n    } \\n\\n    function getEditionAddress(uint256 _editionId) public view returns(address) {\\n        ISingleEditionMintableCreator creator = ISingleEditionMintableCreator(singleEditionMintableCreatorAddress);\\n        return address(creator.getEditionAtId(_editionId));\\n    }\\n}\",\"keccak256\":\"0x2344aa69e30c96b52d589f6f2391252f398f90e56ffa6ebf314ed95fd606b369\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IPaymentSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPaymentSplitter {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address token, address to, uint256 amount);\\n\\n    function initialize(\\n        string calldata _title,\\n        address[] calldata _payees,\\n        uint256[] calldata _shares\\n    ) external;\\n\\n    function title() external view returns (string memory);\\n\\n    function totalShares() external view returns (uint256);\\n\\n    function totalReleased(address account) external view returns (uint256);\\n\\n    function shares(address account) external view returns (uint256);\\n\\n    function released(address token, address account) external view returns (uint256);\\n\\n    function payees(uint256 index) external view returns (address);\\n\\n    function release(address token, address account) external;\\n\\n    function getBalance(address token, address account) external view returns(uint256);\\n}\",\"keccak256\":\"0x5907db9fce875ca55a025c4ad55464a1aace652adee438d546f641f0ff44bf55\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentSplitterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPaymentSplitterFactory {\\n    event DeployPaymentSplitter(\\n        address indexed owner,\\n        string title,\\n        address[] payees,\\n        uint256[] shares,\\n        address splitter\\n    );\\n\\n    function deployPaymentSplitter(\\n        address owner,\\n        string calldata title,\\n        address[] calldata payees,\\n        uint256[] calldata shares\\n    ) external returns (address splitter);\\n\\n    function isPaymentSplitter(address query) external view returns (bool result);\\n}\",\"keccak256\":\"0xc440c19eaf8ed55c71dbd180aa986ad539c5e9c9127a05ae1d42982a7f1e7014\",\"license\":\"MIT\"},\"contracts/interfaces/ISingleEditionMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\ninterface ISingleEditionMintable {\\n  function setApprovedMinter(address minter, bool allowed) external;\\n  function mintEdition(address to) external returns (uint256);\\n  function transferOwnership(address newOwner) external;\\n  function owner() external view returns (address);\\n}\",\"keccak256\":\"0x946a1b23f1c1b48dc559bc2972308e5fa9ee543e9cd73bd9a65502c8278fdca1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ISingleEditionMintableCreator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {ISingleEditionMintable} from \\\"./ISingleEditionMintable.sol\\\";\\n\\ninterface ISingleEditionMintableCreator {\\n    function createEdition(\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _description,\\n        string memory _animationUrl,\\n        bytes32 _animationHash,\\n        string memory _imageUrl,\\n        bytes32 _imageHash,\\n        uint256 _editionSize,\\n        uint256 _royaltyBPS,\\n        uint256 _salePrice\\n    ) external returns (uint256);\\n\\n    function getEditionAtId(uint256 editionId) external\\n        view\\n        returns (ISingleEditionMintable);\\n}\",\"keccak256\":\"0xe1ae843292ef11a1eb9a443d442464d1e4bba9e22296e62e67a61e055f97e7e9\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001e8d38038062001e8d8339818101604052810190620000379190620000d7565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000171565b600081519050620000d18162000157565b92915050565b60008060408385031215620000f157620000f062000152565b5b60006200010185828601620000c0565b92505060206200011485828601620000c0565b9150509250929050565b60006200012b8262000132565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b62000162816200011e565b81146200016e57600080fd5b50565b611d0c80620001816000396000f3fe60806040526004361061009c5760003560e01c806349f426501161006457806349f42650146101aa578063519e9dca146101d55780636b684cb814610200578063def456691461022b578063efef39a114610268578063f1787776146102985761009c565b8063053992c5146100a157806317c9cd27146100ca5780631e010439146101075780632e1a7d4d146101445780633daebf881461016d575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190611404565b6102d5565b005b3480156100d657600080fd5b506100f160048036038101906100ec9190611332565b6104ca565b6040516100fe91906118c5565b60405180910390f35b34801561011357600080fd5b5061012e600480360381019061012991906113aa565b61089a565b60405161013b91906118c5565b60405180910390f35b34801561015057600080fd5b5061016b600480360381019061016691906113aa565b610962565b005b34801561017957600080fd5b50610194600480360381019061018f91906113aa565b610a06565b6040516101a191906118c5565b60405180910390f35b3480156101b657600080fd5b506101bf610a1e565b6040516101cc9190611696565b60405180910390f35b3480156101e157600080fd5b506101ea610a23565b6040516101f79190611696565b60405180910390f35b34801561020c57600080fd5b50610215610a49565b6040516102229190611696565b60405180910390f35b34801561023757600080fd5b50610252600480360381019061024d91906113aa565b610a6d565b60405161025f9190611696565b60405180910390f35b610282600480360381019061027d91906113aa565b610aa0565b60405161028f91906118c5565b60405180910390f35b3480156102a457600080fd5b506102bf60048036038101906102ba91906113aa565b610da7565b6040516102cc9190611696565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663ac52edfd856040518263ffffffff1660e01b815260040161033691906118c5565b60206040518083038186803b15801561034e57600080fd5b505afa158015610362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103869190611305565b90508073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ce57600080fd5b505afa1580156103e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040691906112d8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610473576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046a90611885565b60405180910390fd5b8260036000868152602001908152602001600020819055507f8aa4fa52648a6d15edce8a179c792c86f3719d0cc3c572cf90f91948f0f2cb6884846040516104bc9291906118e0565b60405180910390a150505050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16636606648d86600001518760200151886040015189606001518a608001518b60a001518c60c001518d60e001518e610100015160006040518b63ffffffff1660e01b81526004016105639a99989796959493929190611786565b602060405180830381600087803b15801561057d57600080fd5b505af1158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b591906113d7565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663838e970c338760000151886020015189604001516040518563ffffffff1660e01b81526004016106269493929190611703565b602060405180830381600087803b15801561064057600080fd5b505af1158015610654573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067891906112d8565b905060008373ffffffffffffffffffffffffffffffffffffffff1663ac52edfd846040518263ffffffff1660e01b81526004016106b591906118c5565b60206040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190611305565b90508073ffffffffffffffffffffffffffffffffffffffff166329ec16dd3060016040518363ffffffff1660e01b81526004016107439291906116da565b600060405180830381600087803b15801561075d57600080fd5b505af1158015610771573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b8861014001516040518263ffffffff1660e01b81526004016107b39190611696565b600060405180830381600087803b1580156107cd57600080fd5b505af11580156107e1573d6000803e3d6000fd5b50505050816002600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086610120015160036000858152602001908152602001600020819055507f3e3a65041d8e144eecb9f28b56df83d04a8bb2c5f058212bb1f70c65f8f953e8818460405161088592919061175d565b60405180910390a18294505050505092915050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4fac45d6000336040518363ffffffff1660e01b815260040161090b9291906116b1565b60206040518083038186803b15801561092357600080fd5b505afa158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b91906113d7565b9050919050565b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348b750446000336040518363ffffffff1660e01b81526004016109d19291906116b1565b600060405180830381600087803b1580156109eb57600080fd5b505af11580156109ff573d6000803e3d6000fd5b5050505050565b60036020528060005260406000206000915090505481565b600081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006003600085815260200190815260200160002054905060008111610b34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2b906118a5565b60405180910390fd5b803414610b76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6d90611865565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac52edfd866040518263ffffffff1660e01b8152600401610bd291906118c5565b60206040518083038186803b158015610bea57600080fd5b505afa158015610bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c229190611305565b905060008173ffffffffffffffffffffffffffffffffffffffff1663a66ff0af336040518263ffffffff1660e01b8152600401610c5f9190611696565b602060405180830381600087803b158015610c7957600080fd5b505af1158015610c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb191906113d7565b90507fb12a38f2cd7176b8b381b6ee2ce1d59867557816d9aafbcb9420b74010c828f5868433604051610ce693929190611909565b60405180910390a160008473ffffffffffffffffffffffffffffffffffffffff1634604051610d1490611681565b60006040518083038185875af1925050503d8060008114610d51576040519150601f19603f3d011682016040523d82523d6000602084013e610d56565b606091505b5050905080610d9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9190611845565b60405180910390fd5b8195505050505050919050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663ac52edfd846040518263ffffffff1660e01b8152600401610e0691906118c5565b60206040518083038186803b158015610e1e57600080fd5b505afa158015610e32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e569190611305565b915050919050565b6000610e71610e6c84611965565b611940565b90508083825260208201905082856020860282011115610e9457610e93611bae565b5b60005b85811015610ec45781610eaa8882610f80565b845260208401935060208301925050600181019050610e97565b5050509392505050565b6000610ee1610edc84611991565b611940565b90508083825260208201905082856020860282011115610f0457610f03611bae565b5b60005b85811015610f345781610f1a88826112ae565b845260208401935060208301925050600181019050610f07565b5050509392505050565b6000610f51610f4c846119bd565b611940565b905082815260208101848484011115610f6d57610f6c611bb3565b5b610f78848285611afd565b509392505050565b600081359050610f8f81611c7a565b92915050565b600081519050610fa481611c7a565b92915050565b600082601f830112610fbf57610fbe611b9f565b5b8135610fcf848260208601610e5e565b91505092915050565b600082601f830112610fed57610fec611b9f565b5b8135610ffd848260208601610ece565b91505092915050565b60008135905061101581611c91565b92915050565b60008151905061102a81611ca8565b92915050565b600082601f83011261104557611044611b9f565b5b8135611055848260208601610f3e565b91505092915050565b6000610160828403121561107557611074611ba4565b5b611080610160611940565b9050600082013567ffffffffffffffff8111156110a05761109f611ba9565b5b6110ac84828501611030565b600083015250602082013567ffffffffffffffff8111156110d0576110cf611ba9565b5b6110dc84828501611030565b602083015250604082013567ffffffffffffffff811115611100576110ff611ba9565b5b61110c84828501611030565b604083015250606082013567ffffffffffffffff8111156111305761112f611ba9565b5b61113c84828501611030565b606083015250608061115084828501611006565b60808301525060a082013567ffffffffffffffff81111561117457611173611ba9565b5b61118084828501611030565b60a08301525060c061119484828501611006565b60c08301525060e06111a8848285016112ae565b60e0830152506101006111bd848285016112ae565b610100830152506101206111d3848285016112ae565b610120830152506101406111e984828501610f80565b6101408301525092915050565b60006060828403121561120c5761120b611ba4565b5b6112166060611940565b9050600082013567ffffffffffffffff81111561123657611235611ba9565b5b61124284828501611030565b600083015250602082013567ffffffffffffffff81111561126657611265611ba9565b5b61127284828501610faa565b602083015250604082013567ffffffffffffffff81111561129657611295611ba9565b5b6112a284828501610fd8565b60408301525092915050565b6000813590506112bd81611cbf565b92915050565b6000815190506112d281611cbf565b92915050565b6000602082840312156112ee576112ed611bbd565b5b60006112fc84828501610f95565b91505092915050565b60006020828403121561131b5761131a611bbd565b5b60006113298482850161101b565b91505092915050565b6000806040838503121561134957611348611bbd565b5b600083013567ffffffffffffffff81111561136757611366611bb8565b5b6113738582860161105e565b925050602083013567ffffffffffffffff81111561139457611393611bb8565b5b6113a0858286016111f6565b9150509250929050565b6000602082840312156113c0576113bf611bbd565b5b60006113ce848285016112ae565b91505092915050565b6000602082840312156113ed576113ec611bbd565b5b60006113fb848285016112c3565b91505092915050565b6000806040838503121561141b5761141a611bbd565b5b6000611429858286016112ae565b925050602061143a858286016112ae565b9150509250929050565b60006114508383611474565b60208301905092915050565b60006114688383611663565b60208301905092915050565b61147d81611a87565b82525050565b61148c81611a87565b82525050565b600061149d82611a0e565b6114a78185611a49565b93506114b2836119ee565b8060005b838110156114e35781516114ca8882611444565b97506114d583611a2f565b9250506001810190506114b6565b5085935050505092915050565b60006114fb82611a19565b6115058185611a5a565b9350611510836119fe565b8060005b83811015611541578151611528888261145c565b975061153383611a3c565b925050600181019050611514565b5085935050505092915050565b61155781611a99565b82525050565b61156681611aa5565b82525050565b61157581611aeb565b82525050565b600061158682611a24565b6115908185611a76565b93506115a0818560208601611b0c565b6115a981611bc2565b840191505092915050565b60006115c1600e83611a76565b91506115cc82611bd3565b602082019050919050565b60006115e4600d83611a76565b91506115ef82611bfc565b602082019050919050565b6000611607600983611a76565b915061161282611c25565b602082019050919050565b600061162a600083611a6b565b915061163582611c4e565b600082019050919050565b600061164d600c83611a76565b915061165882611c51565b602082019050919050565b61166c81611ae1565b82525050565b61167b81611ae1565b82525050565b600061168c8261161d565b9150819050919050565b60006020820190506116ab6000830184611483565b92915050565b60006040820190506116c66000830185611483565b6116d36020830184611483565b9392505050565b60006040820190506116ef6000830185611483565b6116fc602083018461154e565b9392505050565b60006080820190506117186000830187611483565b818103602083015261172a818661157b565b9050818103604083015261173e8185611492565b9050818103606083015261175281846114f0565b905095945050505050565b60006040820190506117726000830185611483565b61177f6020830184611672565b9392505050565b60006101408201905081810360008301526117a1818d61157b565b905081810360208301526117b5818c61157b565b905081810360408301526117c9818b61157b565b905081810360608301526117dd818a61157b565b90506117ec608083018961155d565b81810360a08301526117fe818861157b565b905061180d60c083018761155d565b61181a60e0830186611672565b611828610100830185611672565b61183661012083018461156c565b9b9a5050505050505050505050565b6000602082019050818103600083015261185e816115b4565b9050919050565b6000602082019050818103600083015261187e816115d7565b9050919050565b6000602082019050818103600083015261189e816115fa565b9050919050565b600060208201905081810360008301526118be81611640565b9050919050565b60006020820190506118da6000830184611672565b92915050565b60006040820190506118f56000830185611672565b6119026020830184611672565b9392505050565b600060608201905061191e6000830186611672565b61192b6020830185611672565b6119386040830184611483565b949350505050565b600061194a61195b565b90506119568282611b3f565b919050565b6000604051905090565b600067ffffffffffffffff8211156119805761197f611b70565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156119ac576119ab611b70565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156119d8576119d7611b70565b5b6119e182611bc2565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611a9282611ac1565b9050919050565b60008115159050919050565b6000819050919050565b6000611aba82611a87565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611af682611ae1565b9050919050565b82818337600083830152505050565b60005b83811015611b2a578082015181840152602081019050611b0f565b83811115611b39576000848401525b50505050565b611b4882611bc2565b810181811067ffffffffffffffff82111715611b6757611b66611b70565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f53504c49545445525f4552524f52000000000000000000000000000000000000600082015250565b7f494e56414c49445f505249434500000000000000000000000000000000000000600082015250565b7f464f5242494444454e0000000000000000000000000000000000000000000000600082015250565b50565b7f4e4f545f464f525f53414c450000000000000000000000000000000000000000600082015250565b611c8381611a87565b8114611c8e57600080fd5b50565b611c9a81611aa5565b8114611ca557600080fd5b50565b611cb181611aaf565b8114611cbc57600080fd5b50565b611cc881611ae1565b8114611cd357600080fd5b5056fea26469706673582212200efa07d967ed15ed067c6200fd6e4e5722ead019939ea1d9e047a6a4537de9a764736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c806349f426501161006457806349f42650146101aa578063519e9dca146101d55780636b684cb814610200578063def456691461022b578063efef39a114610268578063f1787776146102985761009c565b8063053992c5146100a157806317c9cd27146100ca5780631e010439146101075780632e1a7d4d146101445780633daebf881461016d575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190611404565b6102d5565b005b3480156100d657600080fd5b506100f160048036038101906100ec9190611332565b6104ca565b6040516100fe91906118c5565b60405180910390f35b34801561011357600080fd5b5061012e600480360381019061012991906113aa565b61089a565b60405161013b91906118c5565b60405180910390f35b34801561015057600080fd5b5061016b600480360381019061016691906113aa565b610962565b005b34801561017957600080fd5b50610194600480360381019061018f91906113aa565b610a06565b6040516101a191906118c5565b60405180910390f35b3480156101b657600080fd5b506101bf610a1e565b6040516101cc9190611696565b60405180910390f35b3480156101e157600080fd5b506101ea610a23565b6040516101f79190611696565b60405180910390f35b34801561020c57600080fd5b50610215610a49565b6040516102229190611696565b60405180910390f35b34801561023757600080fd5b50610252600480360381019061024d91906113aa565b610a6d565b60405161025f9190611696565b60405180910390f35b610282600480360381019061027d91906113aa565b610aa0565b60405161028f91906118c5565b60405180910390f35b3480156102a457600080fd5b506102bf60048036038101906102ba91906113aa565b610da7565b6040516102cc9190611696565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663ac52edfd856040518263ffffffff1660e01b815260040161033691906118c5565b60206040518083038186803b15801561034e57600080fd5b505afa158015610362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103869190611305565b90508073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156103ce57600080fd5b505afa1580156103e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040691906112d8565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610473576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046a90611885565b60405180910390fd5b8260036000868152602001908152602001600020819055507f8aa4fa52648a6d15edce8a179c792c86f3719d0cc3c572cf90f91948f0f2cb6884846040516104bc9291906118e0565b60405180910390a150505050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16636606648d86600001518760200151886040015189606001518a608001518b60a001518c60c001518d60e001518e610100015160006040518b63ffffffff1660e01b81526004016105639a99989796959493929190611786565b602060405180830381600087803b15801561057d57600080fd5b505af1158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b591906113d7565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663838e970c338760000151886020015189604001516040518563ffffffff1660e01b81526004016106269493929190611703565b602060405180830381600087803b15801561064057600080fd5b505af1158015610654573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067891906112d8565b905060008373ffffffffffffffffffffffffffffffffffffffff1663ac52edfd846040518263ffffffff1660e01b81526004016106b591906118c5565b60206040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190611305565b90508073ffffffffffffffffffffffffffffffffffffffff166329ec16dd3060016040518363ffffffff1660e01b81526004016107439291906116da565b600060405180830381600087803b15801561075d57600080fd5b505af1158015610771573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b8861014001516040518263ffffffff1660e01b81526004016107b39190611696565b600060405180830381600087803b1580156107cd57600080fd5b505af11580156107e1573d6000803e3d6000fd5b50505050816002600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086610120015160036000858152602001908152602001600020819055507f3e3a65041d8e144eecb9f28b56df83d04a8bb2c5f058212bb1f70c65f8f953e8818460405161088592919061175d565b60405180910390a18294505050505092915050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d4fac45d6000336040518363ffffffff1660e01b815260040161090b9291906116b1565b60206040518083038186803b15801561092357600080fd5b505afa158015610937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095b91906113d7565b9050919050565b6002600082815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348b750446000336040518363ffffffff1660e01b81526004016109d19291906116b1565b600060405180830381600087803b1580156109eb57600080fd5b505af11580156109ff573d6000803e3d6000fd5b5050505050565b60036020528060005260406000206000915090505481565b600081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060006003600085815260200190815260200160002054905060008111610b34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2b906118a5565b60405180910390fd5b803414610b76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6d90611865565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac52edfd866040518263ffffffff1660e01b8152600401610bd291906118c5565b60206040518083038186803b158015610bea57600080fd5b505afa158015610bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c229190611305565b905060008173ffffffffffffffffffffffffffffffffffffffff1663a66ff0af336040518263ffffffff1660e01b8152600401610c5f9190611696565b602060405180830381600087803b158015610c7957600080fd5b505af1158015610c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb191906113d7565b90507fb12a38f2cd7176b8b381b6ee2ce1d59867557816d9aafbcb9420b74010c828f5868433604051610ce693929190611909565b60405180910390a160008473ffffffffffffffffffffffffffffffffffffffff1634604051610d1490611681565b60006040518083038185875af1925050503d8060008114610d51576040519150601f19603f3d011682016040523d82523d6000602084013e610d56565b606091505b5050905080610d9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9190611845565b60405180910390fd5b8195505050505050919050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663ac52edfd846040518263ffffffff1660e01b8152600401610e0691906118c5565b60206040518083038186803b158015610e1e57600080fd5b505afa158015610e32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e569190611305565b915050919050565b6000610e71610e6c84611965565b611940565b90508083825260208201905082856020860282011115610e9457610e93611bae565b5b60005b85811015610ec45781610eaa8882610f80565b845260208401935060208301925050600181019050610e97565b5050509392505050565b6000610ee1610edc84611991565b611940565b90508083825260208201905082856020860282011115610f0457610f03611bae565b5b60005b85811015610f345781610f1a88826112ae565b845260208401935060208301925050600181019050610f07565b5050509392505050565b6000610f51610f4c846119bd565b611940565b905082815260208101848484011115610f6d57610f6c611bb3565b5b610f78848285611afd565b509392505050565b600081359050610f8f81611c7a565b92915050565b600081519050610fa481611c7a565b92915050565b600082601f830112610fbf57610fbe611b9f565b5b8135610fcf848260208601610e5e565b91505092915050565b600082601f830112610fed57610fec611b9f565b5b8135610ffd848260208601610ece565b91505092915050565b60008135905061101581611c91565b92915050565b60008151905061102a81611ca8565b92915050565b600082601f83011261104557611044611b9f565b5b8135611055848260208601610f3e565b91505092915050565b6000610160828403121561107557611074611ba4565b5b611080610160611940565b9050600082013567ffffffffffffffff8111156110a05761109f611ba9565b5b6110ac84828501611030565b600083015250602082013567ffffffffffffffff8111156110d0576110cf611ba9565b5b6110dc84828501611030565b602083015250604082013567ffffffffffffffff811115611100576110ff611ba9565b5b61110c84828501611030565b604083015250606082013567ffffffffffffffff8111156111305761112f611ba9565b5b61113c84828501611030565b606083015250608061115084828501611006565b60808301525060a082013567ffffffffffffffff81111561117457611173611ba9565b5b61118084828501611030565b60a08301525060c061119484828501611006565b60c08301525060e06111a8848285016112ae565b60e0830152506101006111bd848285016112ae565b610100830152506101206111d3848285016112ae565b610120830152506101406111e984828501610f80565b6101408301525092915050565b60006060828403121561120c5761120b611ba4565b5b6112166060611940565b9050600082013567ffffffffffffffff81111561123657611235611ba9565b5b61124284828501611030565b600083015250602082013567ffffffffffffffff81111561126657611265611ba9565b5b61127284828501610faa565b602083015250604082013567ffffffffffffffff81111561129657611295611ba9565b5b6112a284828501610fd8565b60408301525092915050565b6000813590506112bd81611cbf565b92915050565b6000815190506112d281611cbf565b92915050565b6000602082840312156112ee576112ed611bbd565b5b60006112fc84828501610f95565b91505092915050565b60006020828403121561131b5761131a611bbd565b5b60006113298482850161101b565b91505092915050565b6000806040838503121561134957611348611bbd565b5b600083013567ffffffffffffffff81111561136757611366611bb8565b5b6113738582860161105e565b925050602083013567ffffffffffffffff81111561139457611393611bb8565b5b6113a0858286016111f6565b9150509250929050565b6000602082840312156113c0576113bf611bbd565b5b60006113ce848285016112ae565b91505092915050565b6000602082840312156113ed576113ec611bbd565b5b60006113fb848285016112c3565b91505092915050565b6000806040838503121561141b5761141a611bbd565b5b6000611429858286016112ae565b925050602061143a858286016112ae565b9150509250929050565b60006114508383611474565b60208301905092915050565b60006114688383611663565b60208301905092915050565b61147d81611a87565b82525050565b61148c81611a87565b82525050565b600061149d82611a0e565b6114a78185611a49565b93506114b2836119ee565b8060005b838110156114e35781516114ca8882611444565b97506114d583611a2f565b9250506001810190506114b6565b5085935050505092915050565b60006114fb82611a19565b6115058185611a5a565b9350611510836119fe565b8060005b83811015611541578151611528888261145c565b975061153383611a3c565b925050600181019050611514565b5085935050505092915050565b61155781611a99565b82525050565b61156681611aa5565b82525050565b61157581611aeb565b82525050565b600061158682611a24565b6115908185611a76565b93506115a0818560208601611b0c565b6115a981611bc2565b840191505092915050565b60006115c1600e83611a76565b91506115cc82611bd3565b602082019050919050565b60006115e4600d83611a76565b91506115ef82611bfc565b602082019050919050565b6000611607600983611a76565b915061161282611c25565b602082019050919050565b600061162a600083611a6b565b915061163582611c4e565b600082019050919050565b600061164d600c83611a76565b915061165882611c51565b602082019050919050565b61166c81611ae1565b82525050565b61167b81611ae1565b82525050565b600061168c8261161d565b9150819050919050565b60006020820190506116ab6000830184611483565b92915050565b60006040820190506116c66000830185611483565b6116d36020830184611483565b9392505050565b60006040820190506116ef6000830185611483565b6116fc602083018461154e565b9392505050565b60006080820190506117186000830187611483565b818103602083015261172a818661157b565b9050818103604083015261173e8185611492565b9050818103606083015261175281846114f0565b905095945050505050565b60006040820190506117726000830185611483565b61177f6020830184611672565b9392505050565b60006101408201905081810360008301526117a1818d61157b565b905081810360208301526117b5818c61157b565b905081810360408301526117c9818b61157b565b905081810360608301526117dd818a61157b565b90506117ec608083018961155d565b81810360a08301526117fe818861157b565b905061180d60c083018761155d565b61181a60e0830186611672565b611828610100830185611672565b61183661012083018461156c565b9b9a5050505050505050505050565b6000602082019050818103600083015261185e816115b4565b9050919050565b6000602082019050818103600083015261187e816115d7565b9050919050565b6000602082019050818103600083015261189e816115fa565b9050919050565b600060208201905081810360008301526118be81611640565b9050919050565b60006020820190506118da6000830184611672565b92915050565b60006040820190506118f56000830185611672565b6119026020830184611672565b9392505050565b600060608201905061191e6000830186611672565b61192b6020830185611672565b6119386040830184611483565b949350505050565b600061194a61195b565b90506119568282611b3f565b919050565b6000604051905090565b600067ffffffffffffffff8211156119805761197f611b70565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156119ac576119ab611b70565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156119d8576119d7611b70565b5b6119e182611bc2565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000611a9282611ac1565b9050919050565b60008115159050919050565b6000819050919050565b6000611aba82611a87565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611af682611ae1565b9050919050565b82818337600083830152505050565b60005b83811015611b2a578082015181840152602081019050611b0f565b83811115611b39576000848401525b50505050565b611b4882611bc2565b810181811067ffffffffffffffff82111715611b6757611b66611b70565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f53504c49545445525f4552524f52000000000000000000000000000000000000600082015250565b7f494e56414c49445f505249434500000000000000000000000000000000000000600082015250565b7f464f5242494444454e0000000000000000000000000000000000000000000000600082015250565b50565b7f4e4f545f464f525f53414c450000000000000000000000000000000000000000600082015250565b611c8381611a87565b8114611c8e57600080fd5b50565b611c9a81611aa5565b8114611ca557600080fd5b50565b611cb181611aaf565b8114611cbc57600080fd5b50565b611cc881611ae1565b8114611cd357600080fd5b5056fea26469706673582212200efa07d967ed15ed067c6200fd6e4e5722ead019939ea1d9e047a6a4537de9a764736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3197,
        "contract": "contracts/CuratorEditions.sol:CuratorEditions",
        "label": "singleEditionMintableCreatorAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3199,
        "contract": "contracts/CuratorEditions.sol:CuratorEditions",
        "label": "paymentSplitterFactoryAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3203,
        "contract": "contracts/CuratorEditions.sol:CuratorEditions",
        "label": "editionIdToSplitter",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3207,
        "contract": "contracts/CuratorEditions.sol:CuratorEditions",
        "label": "editionIdToSalePrice",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}