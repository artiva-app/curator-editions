{
  "address": "0xF6A81fd3a0Ab1ba4b32E9D5F451a3B8E90933862",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "payees",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "splitter",
          "type": "address"
        }
      ],
      "name": "DeployPaymentSplitter",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "title",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "payees",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "deployPaymentSplitter",
      "outputs": [
        {
          "internalType": "address",
          "name": "splitter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "query",
          "type": "address"
        }
      ],
      "name": "isPaymentSplitter",
      "outputs": [
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x92241f7996f9a02ce6f6f1e8bb55f0c5f2c55c4ffa22b23b16f51c5b73419037",
  "receipt": {
    "to": null,
    "from": "0xD71f2a53c3BfeD48770a6780fc6c297B8974c6a0",
    "contractAddress": "0xF6A81fd3a0Ab1ba4b32E9D5F451a3B8E90933862",
    "transactionIndex": 38,
    "gasUsed": "2582395",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000",
    "blockHash": "0xd8c94e2fce3d80878195f48d71f59034b48f3c8bd9d871618067588975837412",
    "transactionHash": "0x92241f7996f9a02ce6f6f1e8bb55f0c5f2c55c4ffa22b23b16f51c5b73419037",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 9809459,
        "transactionHash": "0x92241f7996f9a02ce6f6f1e8bb55f0c5f2c55c4ffa22b23b16f51c5b73419037",
        "address": "0xA63d668112BFC6cE68b6d316aBA266BeCEf4e256",
        "topics": [
          "0x40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac"
        ],
        "data": "0x000000000000000000000000d71f2a53c3bfed48770a6780fc6c297b8974c6a00000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 65,
        "blockHash": "0xd8c94e2fce3d80878195f48d71f59034b48f3c8bd9d871618067588975837412"
      }
    ],
    "blockNumber": 9809459,
    "cumulativeGasUsed": "10817776",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6e36514f860638dace4e1919e2294d9d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"splitter\",\"type\":\"address\"}],\"name\":\"DeployPaymentSplitter\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"title\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"payees\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"deployPaymentSplitter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"splitter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"query\",\"type\":\"address\"}],\"name\":\"isPaymentSplitter\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PaymentSplitterFactory.sol\":\"PaymentSplitterFactory\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6287586f5e4a103c89d4dda41406136cdf283cc625bd1ebfdf1468aae5bfe449\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xc1452b054778f1926419196ef12ae200758a4ee728df69ae1cd13e5c16ca7df7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x671741933530f343f023a40e58e61bc09d62494b96c6f3e39e647f315facd519\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9944d1038f27dcebff810d7ba16b3b8058b967173d76874fb72dd7cd84129656\",\"license\":\"MIT\"},\"contracts/PaymentSplitter.sol\":{\"content\":\"\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./interfaces/IPaymentSplitter.sol\\\";\\nimport \\\"./libraries/TokenHelper.sol\\\";\\n\\n// Reference: https://github.com/sushiswap/shoyu/blob/master/contracts/PaymentSplitter.sol\\ncontract PaymentSplitter is Initializable, IPaymentSplitter {\\n    event PaymentReceived(address from, uint256 amount);\\n\\n    using TokenHelper for address;\\n\\n    string public override title;\\n\\n    /**\\n     * @dev Getter for the total shares held by payees.\\n     */\\n    uint256 public override totalShares;\\n    /**\\n     * @dev Getter for the total amount of token already released.\\n     */\\n    mapping(address => uint256) public override totalReleased;\\n\\n    /**\\n     * @dev Getter for the amount of shares held by an account.\\n     */\\n    mapping(address => uint256) public override shares;\\n    /**\\n     * @dev Getter for the amount of token already released to a payee.\\n     */\\n    mapping(address => mapping(address => uint256)) public override released;\\n    /**\\n     * @dev Getter for the address of the payee number `index`.\\n     */\\n    address[] public override payees;\\n\\n    /**\\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\\n     * the matching position in the `shares` array.\\n     *\\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\\n     * duplicates in `payees`.\\n     */\\n    function initialize(\\n        string calldata _title,\\n        address[] calldata _payees,\\n        uint256[] calldata _shares\\n    ) external override initializer {\\n        require(_payees.length == _shares.length, \\\"LENGTHS_NOT_EQUAL\\\");\\n        require(_payees.length > 0, \\\"LENGTH_TOO_SHORT\\\");\\n\\n        title = _title;\\n\\n        for (uint256 i = 0; i < _payees.length; i++) {\\n            _addPayee(_payees[i], _shares[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers a transfer to `account` of the amount of token they are owed, according to their percentage of the\\n     * total shares and their previous withdrawals.\\n     */\\n    function release(address token, address account) external virtual override {\\n        require(shares[account] > 0, \\\"FORBIDDEN\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased[token];\\n        uint256 payment = (totalReceived * shares[account]) / totalShares - released[token][account];\\n\\n        require(payment != 0, \\\"NO_PAYMENT\\\");\\n\\n        released[token][account] += payment;\\n        totalReleased[token] += payment;\\n\\n        token.safeTransfer(account, payment);\\n        emit PaymentReleased(token, account, payment);\\n    }\\n\\n    function getBalance(address token, address account) external view override returns(uint256) {\\n        require(shares[account] > 0, \\\"FORBIDDEN\\\");\\n\\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased[token];\\n        uint256 payment = (totalReceived * shares[account]) / totalShares - released[token][account];\\n        return payment;\\n    }\\n\\n    /**\\n     * @dev Add a new payee to the contract.\\n     * @param account The address of the payee to add.\\n     * @param _shares The number of shares owned by the payee.\\n     */\\n    function _addPayee(address account, uint256 _shares) private {\\n        require(account != address(0), \\\"INVALID_ADDRESS\\\");\\n        require(_shares > 0, \\\"INVALID_SHARES\\\");\\n        require(shares[account] == 0, \\\"ALREADY_ADDED\\\");\\n\\n        payees.push(account);\\n        shares[account] = _shares;\\n        totalShares = totalShares + _shares;\\n        emit PayeeAdded(account, _shares);\\n    }\\n\\n    receive() external payable virtual {\\n        emit PaymentReceived(msg.sender, msg.value);\\n    }\\n}\",\"keccak256\":\"0xb238880b84cac430cd144fb515d9f29183c786d1fb5c361adfe73fd47dcc4240\",\"license\":\"MIT\"},\"contracts/PaymentSplitterFactory.sol\":{\"content\":\"\\n   \\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IPaymentSplitterFactory.sol\\\";\\nimport \\\"./base/ProxyFactory.sol\\\";\\nimport \\\"./PaymentSplitter.sol\\\";\\n\\n// Reference: https://github.com/sushiswap/shoyu/blob/master/contracts/PaymentSplitterFactory.sol\\ncontract PaymentSplitterFactory is ProxyFactory, IPaymentSplitterFactory {\\n    address internal _target;\\n\\n    constructor() {\\n        PaymentSplitter target = new PaymentSplitter();\\n        address[] memory payees = new address[](1);\\n        payees[0] = msg.sender;\\n        uint256[] memory shares = new uint256[](1);\\n        shares[0] = 1;\\n        target.initialize(\\\"\\\", payees, shares);\\n        _target = address(target);\\n    }\\n\\n    function deployPaymentSplitter(\\n        address owner,\\n        string calldata title,\\n        address[] calldata payees,\\n        uint256[] calldata shares\\n    ) external override returns (address splitter) {\\n        splitter = _createProxy(\\n            _target,\\n            abi.encodeWithSignature(\\\"initialize(string,address[],uint256[])\\\", title, payees, shares)\\n        );\\n\\n        emit DeployPaymentSplitter(owner, title, payees, shares, splitter);\\n    }\\n\\n    function isPaymentSplitter(address query) external view override returns (bool result) {\\n        return _isProxy(_target, query);\\n    }\\n}\",\"keccak256\":\"0xd09e9bb30a5a2f84c889c296f101c4e840d038f63a473a0bded97f3fb96dde3d\",\"license\":\"MIT\"},\"contracts/base/ProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// Reference: https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\\ncontract ProxyFactory {\\n    function _createProxy(address target, bytes memory initData) internal returns (address proxy) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            proxy := create(0, clone, 0x37)\\n        }\\n\\n        if (initData.length > 0) {\\n            (bool success, ) = proxy.call(initData);\\n            require(success, \\\"SHOYU: CALL_FAILURE\\\");\\n        }\\n    }\\n\\n    function _isProxy(address target, address query) internal view returns (bool result) {\\n        bytes20 targetBytes = bytes20(target);\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\\n            mstore(add(clone, 0xa), targetBytes)\\n            mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n\\n            let other := add(clone, 0x40)\\n            extcodecopy(query, other, 0, 0x2d)\\n            result := and(eq(mload(clone), mload(other)), eq(mload(add(clone, 0xd)), mload(add(other, 0xd))))\\n        }\\n    }\\n}\",\"keccak256\":\"0xd878fd8f86f5a98aa39250ae285eb69f932bcf8bf9e5d63a6499364815cce295\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentSplitter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPaymentSplitter {\\n    event PayeeAdded(address account, uint256 shares);\\n    event PaymentReleased(address token, address to, uint256 amount);\\n\\n    function initialize(\\n        string calldata _title,\\n        address[] calldata _payees,\\n        uint256[] calldata _shares\\n    ) external;\\n\\n    function title() external view returns (string memory);\\n\\n    function totalShares() external view returns (uint256);\\n\\n    function totalReleased(address account) external view returns (uint256);\\n\\n    function shares(address account) external view returns (uint256);\\n\\n    function released(address token, address account) external view returns (uint256);\\n\\n    function payees(uint256 index) external view returns (address);\\n\\n    function release(address token, address account) external;\\n\\n    function getBalance(address token, address account) external view returns(uint256);\\n}\",\"keccak256\":\"0x5907db9fce875ca55a025c4ad55464a1aace652adee438d546f641f0ff44bf55\",\"license\":\"MIT\"},\"contracts/interfaces/IPaymentSplitterFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IPaymentSplitterFactory {\\n    event DeployPaymentSplitter(\\n        address indexed owner,\\n        string title,\\n        address[] payees,\\n        uint256[] shares,\\n        address splitter\\n    );\\n\\n    function deployPaymentSplitter(\\n        address owner,\\n        string calldata title,\\n        address[] calldata payees,\\n        uint256[] calldata shares\\n    ) external returns (address splitter);\\n\\n    function isPaymentSplitter(address query) external view returns (bool result);\\n}\",\"keccak256\":\"0xc440c19eaf8ed55c71dbd180aa986ad539c5e9c9127a05ae1d42982a7f1e7014\",\"license\":\"MIT\"},\"contracts/libraries/TokenHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary TokenHelper {\\n    using SafeERC20 for IERC20;\\n\\n    address public constant ETH = 0x0000000000000000000000000000000000000000;\\n\\n    function balanceOf(address token, address account) internal view returns (uint256) {\\n        if (token == ETH) {\\n            return account.balance;\\n        } else {\\n            return IERC20(token).balanceOf(account);\\n        }\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (token == ETH) {\\n            (bool success, ) = to.call{value: amount}(\\\"\\\");\\n            require(success, \\\"SHOYU: TRANSFER_FAILURE\\\");\\n        } else {\\n            IERC20(token).safeTransfer(to, amount);\\n        }\\n    }\\n}\",\"keccak256\":\"0x529b2cfb89af59fe2d4eed4743c2e8b1dbe4518703422ea67d63bf13f4a0b522\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506000604051620000229062000217565b604051809103906000f0801580156200003f573d6000803e3d6000fd5b5090506000600167ffffffffffffffff811115620000625762000061620004b6565b5b604051908082528060200260200182016040528015620000915781602001602082028036833780820191505090505b5090503381600081518110620000ac57620000ab62000487565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506000600167ffffffffffffffff811115620001065762000105620004b6565b5b604051908082528060200260200182016040528015620001355781602001602082028036833780820191505090505b50905060018160008151811062000151576200015062000487565b5b6020026020010181815250508273ffffffffffffffffffffffffffffffffffffffff166324f3ae7883836040518363ffffffff1660e01b81526004016200019a92919062000376565b600060405180830381600087803b158015620001b557600080fd5b505af1158015620001ca573d6000803e3d6000fd5b50505050826000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620004e8565b6120aa8062000edd83390190565b600062000233838362000259565b60208301905092915050565b60006200024d838362000365565b60208301905092915050565b620002648162000449565b82525050565b60006200027782620003e6565b62000283818562000416565b93506200029083620003c6565b8060005b83811015620002c7578151620002ab888262000225565b9750620002b883620003fc565b92505060018101905062000294565b5085935050505092915050565b6000620002e182620003f1565b620002ed818562000427565b9350620002fa83620003d6565b8060005b83811015620003315781516200031588826200023f565b9750620003228362000409565b925050600181019050620002fe565b5085935050505092915050565b60006200034d60008362000438565b91506200035a82620004e5565b600082019050919050565b62000370816200047d565b82525050565b6000606082019050818103600083015262000391816200033e565b90508181036020830152620003a781856200026a565b90508181036040830152620003bd8184620002d4565b90509392505050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600062000456826200045d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b50565b6109e580620004f86000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806328da4a791461003b578063838e970c1461006b575b600080fd5b610055600480360381019061005091906104b5565b61009b565b604051610062919061075c565b60405180910390f35b610085600480360381019061008091906104e2565b6100ce565b6040516100929190610741565b60405180910390f35b60006100c760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836101f8565b9050919050565b600061019160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688888888888860405160240161010f96959493929190610777565b6040516020818303038152906040527f24f3ae78000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061027a565b90508773ffffffffffffffffffffffffffffffffffffffff167f89bac4a62a028c1569fa1634d2c4f9c8f0685844f9f48689be50bfa7fbb7429e888888888888886040516101e597969594939291906107c9565b60405180910390a2979650505050505050565b6000808360601b90506040517f363d3d373d3d3d363d7300000000000000000000000000000000000000000000815281600a8201527f5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000601e82015260408101602d600082873c600d810151600d83015114815183511416935050505092915050565b6000808360601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09250506000835111156103975760008273ffffffffffffffffffffffffffffffffffffffff168460405161030f919061072a565b6000604051808303816000865af19150503d806000811461034c576040519150601f19603f3d011682016040523d82523d6000602084013e610351565b606091505b5050905080610395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038c90610829565b60405180910390fd5b505b5092915050565b6000813590506103ad81610998565b92915050565b60008083601f8401126103c9576103c8610945565b5b8235905067ffffffffffffffff8111156103e6576103e5610940565b5b6020830191508360208202830111156104025761040161094a565b5b9250929050565b60008083601f84011261041f5761041e610945565b5b8235905067ffffffffffffffff81111561043c5761043b610940565b5b6020830191508360208202830111156104585761045761094a565b5b9250929050565b60008083601f84011261047557610474610945565b5b8235905067ffffffffffffffff81111561049257610491610940565b5b6020830191508360018202830111156104ae576104ad61094a565b5b9250929050565b6000602082840312156104cb576104ca610959565b5b60006104d98482850161039e565b91505092915050565b60008060008060008060006080888a03121561050157610500610959565b5b600061050f8a828b0161039e565b975050602088013567ffffffffffffffff8111156105305761052f61094f565b5b61053c8a828b0161045f565b9650965050604088013567ffffffffffffffff81111561055f5761055e61094f565b5b61056b8a828b016103b3565b9450945050606088013567ffffffffffffffff81111561058e5761058d61094f565b5b61059a8a828b01610409565b925092505092959891949750929550565b60006105b783836105c3565b60208301905092915050565b6105cc816108c0565b82525050565b6105db816108c0565b82525050565b60006105ed838561086b565b93506105f882610849565b8060005b858110156106315761060e82846108a9565b61061888826105ab565b97506106238361085e565b9250506001810190506105fc565b5085925050509392505050565b600061064a838561087c565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561067d5761067c610954565b5b60208302925061068e8385846108fe565b82840190509392505050565b6106a3816108d2565b82525050565b60006106b482610853565b6106be818561088d565b93506106ce81856020860161090d565b80840191505092915050565b60006106e68385610898565b93506106f38385846108fe565b6106fc8361095e565b840190509392505050565b6000610714601383610898565b915061071f8261096f565b602082019050919050565b600061073682846106a9565b915081905092915050565b600060208201905061075660008301846105d2565b92915050565b6000602082019050610771600083018461069a565b92915050565b6000606082019050818103600083015261079281888a6106da565b905081810360208301526107a78186886105e1565b905081810360408301526107bc81848661063e565b9050979650505050505050565b600060808201905081810360008301526107e481898b6106da565b905081810360208301526107f98187896105e1565b9050818103604083015261080e81858761063e565b905061081d60608301846105d2565b98975050505050505050565b6000602082019050818103600083015261084281610707565b9050919050565b6000819050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006108b8602084018461039e565b905092915050565b60006108cb826108de565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561092b578082015181840152602081019050610910565b8381111561093a576000848401525b50505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f53484f59553a2043414c4c5f4641494c55524500000000000000000000000000600082015250565b6109a1816108c0565b81146109ac57600080fd5b5056fea2646970667358221220cac5f4b5be659ef740fbf17b215ec314e16b5669d5cf4d6d4284d355a78a455064736f6c63430008060033608060405234801561001057600080fd5b5061208a806100206000396000f3fe60806040526004361061008a5760003560e01c80634a79d50c116100595780634a79d50c1461018957806363037b0c146101b4578063ce7c2ac2146101f1578063d4fac45d1461022e578063d79779b21461026b576100ca565b806324f3ae78146100cf5780633a98ef39146100f8578063406072a91461012357806348b7504414610160576100ca565b366100ca577f6ef95f06320e7a25a04a175ca677b7052bdd97131872c2192525a629f51be77033346040516100c09291906118a5565b60405180910390a1005b600080fd5b3480156100db57600080fd5b506100f660048036038101906100f191906114ca565b6102a8565b005b34801561010457600080fd5b5061010d610493565b60405161011a9190611a70565b60405180910390f35b34801561012f57600080fd5b5061014a6004803603810190610145919061145d565b610499565b6040516101579190611a70565b60405180910390f35b34801561016c57600080fd5b506101876004803603810190610182919061145d565b6104be565b005b34801561019557600080fd5b5061019e610833565b6040516101ab91906118ce565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d6919061157e565b6108c1565b6040516101e89190611853565b60405180910390f35b3480156101fd57600080fd5b5061021860048036038101906102139190611430565b610900565b6040516102259190611a70565b60405180910390f35b34801561023a57600080fd5b506102556004803603810190610250919061145d565b610918565b6040516102629190611a70565b60405180910390f35b34801561027757600080fd5b50610292600480360381019061028d9190611430565b610b00565b60405161029f9190611a70565b60405180910390f35b600060019054906101000a900460ff16806102ce575060008054906101000a900460ff16155b61030d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030490611990565b60405180910390fd5b60008060019054906101000a900460ff16159050801561035d576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8282905085859050146103a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039c906119f0565b60405180910390fd5b600085859050116103eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e290611930565b60405180910390fd5b8686600191906103fc929190611237565b5060005b858590508110156104685761045586868381811061042157610420611d55565b5b90506020020160208101906104369190611430565b85858481811061044957610448611d55565b5b90506020020135610b18565b808061046090611c7f565b915050610400565b50801561048a5760008060016101000a81548160ff0219169083151502179055505b50505050505050565b60025481565b6005602052816000526040600020602052806000526040600020600091509150505481565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610540576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053790611970565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105ab308573ffffffffffffffffffffffffffffffffffffffff16610d4590919063ffffffff16565b6105b59190611abd565b90506000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600254600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846106849190611b44565b61068e9190611b13565b6106989190611b9e565b905060008114156106de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d5906119d0565b60405180910390fd5b80600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461076a9190611abd565b9250508190555080600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107c09190611abd565b925050819055506107f283828673ffffffffffffffffffffffffffffffffffffffff16610e2c9092919063ffffffff16565b7f8ac5b3c2902b21b6bbb4d99ec195e28a242cb6a1777804db10b84d91e20064298484836040516108259392919061186e565b60405180910390a150505050565b6001805461084090611c4d565b80601f016020809104026020016040519081016040528092919081815260200182805461086c90611c4d565b80156108b95780601f1061088e576101008083540402835291602001916108b9565b820191906000526020600020905b81548152906001019060200180831161089c57829003601f168201915b505050505081565b600681815481106108d157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915090505481565b600080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161099b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099290611970565b60405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a06308673ffffffffffffffffffffffffffffffffffffffff16610d4590919063ffffffff16565b610a109190611abd565b90506000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600254600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205484610adf9190611b44565b610ae99190611b13565b610af39190611b9e565b9050809250505092915050565b60036020528060005260406000206000915090505481565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7f906118f0565b60405180910390fd5b60008111610bcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc290611950565b60405180910390fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610c4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4490611a10565b60405180910390fd5b6006829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600254610d029190611abd565b6002819055507f40c340f65e17194d14ddddb073d3c9f888e3cb52b5aae0c6c7706b4fbc905fac8282604051610d399291906118a5565b60405180910390a15050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d9a578173ffffffffffffffffffffffffffffffffffffffff16319050610e26565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b8152600401610dd39190611853565b60206040518083038186803b158015610deb57600080fd5b505afa158015610dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2391906115ab565b90505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f135760008273ffffffffffffffffffffffffffffffffffffffff1682604051610e879061183e565b60006040518083038185875af1925050503d8060008114610ec4576040519150601f19603f3d011682016040523d82523d6000602084013e610ec9565b606091505b5050905080610f0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f04906119b0565b60405180910390fd5b50610f3f565b610f3e82828573ffffffffffffffffffffffffffffffffffffffff16610f449092919063ffffffff16565b5b505050565b610fc58363a9059cbb60e01b8484604051602401610f639291906118a5565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610fca565b505050565b600061102c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110919092919063ffffffff16565b905060008151111561108c578080602001905181019061104c919061149d565b61108b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108290611a50565b60405180910390fd5b5b505050565b60606110a084846000856110a9565b90509392505050565b6060824710156110ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e590611910565b60405180910390fd5b6110f7856111bd565b611136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112d90611a30565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161115f9190611827565b60006040518083038185875af1925050503d806000811461119c576040519150601f19603f3d011682016040523d82523d6000602084013e6111a1565b606091505b50915091506111b18282866111d0565b92505050949350505050565b600080823b905060008111915050919050565b606083156111e057829050611230565b6000835111156111f35782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122791906118ce565b60405180910390fd5b9392505050565b82805461124390611c4d565b90600052602060002090601f01602090048101928261126557600085556112ac565b82601f1061127e57803560ff19168380011785556112ac565b828001600101855582156112ac579182015b828111156112ab578235825591602001919060010190611290565b5b5090506112b991906112bd565b5090565b5b808211156112d65760008160009055506001016112be565b5090565b6000813590506112e98161200f565b92915050565b60008083601f84011261130557611304611d89565b5b8235905067ffffffffffffffff81111561132257611321611d84565b5b60208301915083602082028301111561133e5761133d611d8e565b5b9250929050565b60008083601f84011261135b5761135a611d89565b5b8235905067ffffffffffffffff81111561137857611377611d84565b5b60208301915083602082028301111561139457611393611d8e565b5b9250929050565b6000815190506113aa81612026565b92915050565b60008083601f8401126113c6576113c5611d89565b5b8235905067ffffffffffffffff8111156113e3576113e2611d84565b5b6020830191508360018202830111156113ff576113fe611d8e565b5b9250929050565b6000813590506114158161203d565b92915050565b60008151905061142a8161203d565b92915050565b60006020828403121561144657611445611d98565b5b6000611454848285016112da565b91505092915050565b6000806040838503121561147457611473611d98565b5b6000611482858286016112da565b9250506020611493858286016112da565b9150509250929050565b6000602082840312156114b3576114b2611d98565b5b60006114c18482850161139b565b91505092915050565b600080600080600080606087890312156114e7576114e6611d98565b5b600087013567ffffffffffffffff81111561150557611504611d93565b5b61151189828a016113b0565b9650965050602087013567ffffffffffffffff81111561153457611533611d93565b5b61154089828a016112ef565b9450945050604087013567ffffffffffffffff81111561156357611562611d93565b5b61156f89828a01611345565b92509250509295509295509295565b60006020828403121561159457611593611d98565b5b60006115a284828501611406565b91505092915050565b6000602082840312156115c1576115c0611d98565b5b60006115cf8482850161141b565b91505092915050565b6115e181611bd2565b82525050565b60006115f282611a8b565b6115fc8185611aa1565b935061160c818560208601611c1a565b80840191505092915050565b600061162382611a96565b61162d8185611aac565b935061163d818560208601611c1a565b61164681611d9d565b840191505092915050565b600061165e600f83611aac565b915061166982611dae565b602082019050919050565b6000611681602683611aac565b915061168c82611dd7565b604082019050919050565b60006116a4601083611aac565b91506116af82611e26565b602082019050919050565b60006116c7600e83611aac565b91506116d282611e4f565b602082019050919050565b60006116ea600983611aac565b91506116f582611e78565b602082019050919050565b600061170d602e83611aac565b915061171882611ea1565b604082019050919050565b6000611730601783611aac565b915061173b82611ef0565b602082019050919050565b6000611753600a83611aac565b915061175e82611f19565b602082019050919050565b6000611776601183611aac565b915061178182611f42565b602082019050919050565b6000611799600083611aa1565b91506117a482611f6b565b600082019050919050565b60006117bc600d83611aac565b91506117c782611f6e565b602082019050919050565b60006117df601d83611aac565b91506117ea82611f97565b602082019050919050565b6000611802602a83611aac565b915061180d82611fc0565b604082019050919050565b61182181611c10565b82525050565b600061183382846115e7565b915081905092915050565b60006118498261178c565b9150819050919050565b600060208201905061186860008301846115d8565b92915050565b600060608201905061188360008301866115d8565b61189060208301856115d8565b61189d6040830184611818565b949350505050565b60006040820190506118ba60008301856115d8565b6118c76020830184611818565b9392505050565b600060208201905081810360008301526118e88184611618565b905092915050565b6000602082019050818103600083015261190981611651565b9050919050565b6000602082019050818103600083015261192981611674565b9050919050565b6000602082019050818103600083015261194981611697565b9050919050565b60006020820190508181036000830152611969816116ba565b9050919050565b60006020820190508181036000830152611989816116dd565b9050919050565b600060208201905081810360008301526119a981611700565b9050919050565b600060208201905081810360008301526119c981611723565b9050919050565b600060208201905081810360008301526119e981611746565b9050919050565b60006020820190508181036000830152611a0981611769565b9050919050565b60006020820190508181036000830152611a29816117af565b9050919050565b60006020820190508181036000830152611a49816117d2565b9050919050565b60006020820190508181036000830152611a69816117f5565b9050919050565b6000602082019050611a856000830184611818565b92915050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611ac882611c10565b9150611ad383611c10565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611b0857611b07611cc8565b5b828201905092915050565b6000611b1e82611c10565b9150611b2983611c10565b925082611b3957611b38611cf7565b5b828204905092915050565b6000611b4f82611c10565b9150611b5a83611c10565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611b9357611b92611cc8565b5b828202905092915050565b6000611ba982611c10565b9150611bb483611c10565b925082821015611bc757611bc6611cc8565b5b828203905092915050565b6000611bdd82611bf0565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015611c38578082015181840152602081019050611c1d565b83811115611c47576000848401525b50505050565b60006002820490506001821680611c6557607f821691505b60208210811415611c7957611c78611d26565b5b50919050565b6000611c8a82611c10565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611cbd57611cbc611cc8565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f494e56414c49445f414444524553530000000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f4c454e4754485f544f4f5f53484f525400000000000000000000000000000000600082015250565b7f494e56414c49445f534841524553000000000000000000000000000000000000600082015250565b7f464f5242494444454e0000000000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f53484f59553a205452414e534645525f4641494c555245000000000000000000600082015250565b7f4e4f5f5041594d454e5400000000000000000000000000000000000000000000600082015250565b7f4c454e475448535f4e4f545f455155414c000000000000000000000000000000600082015250565b50565b7f414c52454144595f414444454400000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b61201881611bd2565b811461202357600080fd5b50565b61202f81611be4565b811461203a57600080fd5b50565b61204681611c10565b811461205157600080fd5b5056fea26469706673582212203809260b048ac74a8f953505dc24ba6c853e179d36dfb89a990ee332c0bb35ef64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806328da4a791461003b578063838e970c1461006b575b600080fd5b610055600480360381019061005091906104b5565b61009b565b604051610062919061075c565b60405180910390f35b610085600480360381019061008091906104e2565b6100ce565b6040516100929190610741565b60405180910390f35b60006100c760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836101f8565b9050919050565b600061019160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1688888888888860405160240161010f96959493929190610777565b6040516020818303038152906040527f24f3ae78000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061027a565b90508773ffffffffffffffffffffffffffffffffffffffff167f89bac4a62a028c1569fa1634d2c4f9c8f0685844f9f48689be50bfa7fbb7429e888888888888886040516101e597969594939291906107c9565b60405180910390a2979650505050505050565b6000808360601b90506040517f363d3d373d3d3d363d7300000000000000000000000000000000000000000000815281600a8201527f5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000601e82015260408101602d600082873c600d810151600d83015114815183511416935050505092915050565b6000808360601b90506040517f3d602d80600a3d3981f3363d3d373d3d3d363d7300000000000000000000000081528160148201527f5af43d82803e903d91602b57fd5bf3000000000000000000000000000000000060288201526037816000f09250506000835111156103975760008273ffffffffffffffffffffffffffffffffffffffff168460405161030f919061072a565b6000604051808303816000865af19150503d806000811461034c576040519150601f19603f3d011682016040523d82523d6000602084013e610351565b606091505b5050905080610395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038c90610829565b60405180910390fd5b505b5092915050565b6000813590506103ad81610998565b92915050565b60008083601f8401126103c9576103c8610945565b5b8235905067ffffffffffffffff8111156103e6576103e5610940565b5b6020830191508360208202830111156104025761040161094a565b5b9250929050565b60008083601f84011261041f5761041e610945565b5b8235905067ffffffffffffffff81111561043c5761043b610940565b5b6020830191508360208202830111156104585761045761094a565b5b9250929050565b60008083601f84011261047557610474610945565b5b8235905067ffffffffffffffff81111561049257610491610940565b5b6020830191508360018202830111156104ae576104ad61094a565b5b9250929050565b6000602082840312156104cb576104ca610959565b5b60006104d98482850161039e565b91505092915050565b60008060008060008060006080888a03121561050157610500610959565b5b600061050f8a828b0161039e565b975050602088013567ffffffffffffffff8111156105305761052f61094f565b5b61053c8a828b0161045f565b9650965050604088013567ffffffffffffffff81111561055f5761055e61094f565b5b61056b8a828b016103b3565b9450945050606088013567ffffffffffffffff81111561058e5761058d61094f565b5b61059a8a828b01610409565b925092505092959891949750929550565b60006105b783836105c3565b60208301905092915050565b6105cc816108c0565b82525050565b6105db816108c0565b82525050565b60006105ed838561086b565b93506105f882610849565b8060005b858110156106315761060e82846108a9565b61061888826105ab565b97506106238361085e565b9250506001810190506105fc565b5085925050509392505050565b600061064a838561087c565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561067d5761067c610954565b5b60208302925061068e8385846108fe565b82840190509392505050565b6106a3816108d2565b82525050565b60006106b482610853565b6106be818561088d565b93506106ce81856020860161090d565b80840191505092915050565b60006106e68385610898565b93506106f38385846108fe565b6106fc8361095e565b840190509392505050565b6000610714601383610898565b915061071f8261096f565b602082019050919050565b600061073682846106a9565b915081905092915050565b600060208201905061075660008301846105d2565b92915050565b6000602082019050610771600083018461069a565b92915050565b6000606082019050818103600083015261079281888a6106da565b905081810360208301526107a78186886105e1565b905081810360408301526107bc81848661063e565b9050979650505050505050565b600060808201905081810360008301526107e481898b6106da565b905081810360208301526107f98187896105e1565b9050818103604083015261080e81858761063e565b905061081d60608301846105d2565b98975050505050505050565b6000602082019050818103600083015261084281610707565b9050919050565b6000819050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006108b8602084018461039e565b905092915050565b60006108cb826108de565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561092b578082015181840152602081019050610910565b8381111561093a576000848401525b50505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f53484f59553a2043414c4c5f4641494c55524500000000000000000000000000600082015250565b6109a1816108c0565b81146109ac57600080fd5b5056fea2646970667358221220cac5f4b5be659ef740fbf17b215ec314e16b5669d5cf4d6d4284d355a78a455064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4472,
        "contract": "contracts/PaymentSplitterFactory.sol:PaymentSplitterFactory",
        "label": "_target",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}