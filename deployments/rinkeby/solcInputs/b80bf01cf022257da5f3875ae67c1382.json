{
  "language": "Solidity",
  "sources": {
    "contracts/base/ProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// Reference: https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\ncontract ProxyFactory {\n    function _createProxy(address target, bytes memory initData) internal returns (address proxy) {\n        bytes20 targetBytes = bytes20(target);\n        assembly {\n            let clone := mload(0x40)\n            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n            mstore(add(clone, 0x14), targetBytes)\n            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n            proxy := create(0, clone, 0x37)\n        }\n\n        if (initData.length > 0) {\n            (bool success, ) = proxy.call(initData);\n            require(success, \"SHOYU: CALL_FAILURE\");\n        }\n    }\n\n    function _isProxy(address target, address query) internal view returns (bool result) {\n        bytes20 targetBytes = bytes20(target);\n        assembly {\n            let clone := mload(0x40)\n            mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\n            mstore(add(clone, 0xa), targetBytes)\n            mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n\n            let other := add(clone, 0x40)\n            extcodecopy(query, other, 0, 0x2d)\n            result := and(eq(mload(clone), mload(other)), eq(mload(add(clone, 0xd)), mload(add(other, 0xd))))\n        }\n    }\n}"
    },
    "contracts/PaymentSplitterFactory.sol": {
      "content": "\n   \n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interfaces/IPaymentSplitterFactory.sol\";\nimport \"./base/ProxyFactory.sol\";\nimport \"./PaymentSplitter.sol\";\n\n// Reference: https://github.com/sushiswap/shoyu/blob/master/contracts/PaymentSplitterFactory.sol\ncontract PaymentSplitterFactory is ProxyFactory, IPaymentSplitterFactory {\n    address internal _target;\n\n    constructor() {\n        PaymentSplitter target = new PaymentSplitter();\n        address[] memory payees = new address[](1);\n        payees[0] = msg.sender;\n        uint256[] memory shares = new uint256[](1);\n        shares[0] = 1;\n        target.initialize(\"\", payees, shares);\n        _target = address(target);\n    }\n\n    function deployPaymentSplitter(\n        address owner,\n        string calldata title,\n        address[] calldata payees,\n        uint256[] calldata shares\n    ) external override returns (address splitter) {\n        splitter = _createProxy(\n            _target,\n            abi.encodeWithSignature(\"initialize(string,address[],uint256[])\", title, payees, shares)\n        );\n\n        emit DeployPaymentSplitter(owner, title, payees, shares, splitter);\n    }\n\n    function isPaymentSplitter(address query) external view override returns (bool result) {\n        return _isProxy(_target, query);\n    }\n}"
    },
    "contracts/interfaces/IPaymentSplitterFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPaymentSplitterFactory {\n    event DeployPaymentSplitter(\n        address indexed owner,\n        string title,\n        address[] payees,\n        uint256[] shares,\n        address splitter\n    );\n\n    function deployPaymentSplitter(\n        address owner,\n        string calldata title,\n        address[] calldata payees,\n        uint256[] calldata shares\n    ) external returns (address splitter);\n\n    function isPaymentSplitter(address query) external view returns (bool result);\n}"
    },
    "contracts/PaymentSplitter.sol": {
      "content": "\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nimport \"./interfaces/IPaymentSplitter.sol\";\nimport \"./libraries/TokenHelper.sol\";\n\n// Reference: https://github.com/sushiswap/shoyu/blob/master/contracts/PaymentSplitter.sol\ncontract PaymentSplitter is Initializable, IPaymentSplitter {\n    event PaymentReceived(address from, uint256 amount);\n\n    using TokenHelper for address;\n\n    string public override title;\n\n    /**\n     * @dev Getter for the total shares held by payees.\n     */\n    uint256 public override totalShares;\n    /**\n     * @dev Getter for the total amount of token already released.\n     */\n    mapping(address => uint256) public override totalReleased;\n\n    /**\n     * @dev Getter for the amount of shares held by an account.\n     */\n    mapping(address => uint256) public override shares;\n    /**\n     * @dev Getter for the amount of token already released to a payee.\n     */\n    mapping(address => mapping(address => uint256)) public override released;\n    /**\n     * @dev Getter for the address of the payee number `index`.\n     */\n    address[] public override payees;\n\n    /**\n     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n     * the matching position in the `shares` array.\n     *\n     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n     * duplicates in `payees`.\n     */\n    function initialize(\n        string calldata _title,\n        address[] calldata _payees,\n        uint256[] calldata _shares\n    ) external override initializer {\n        require(_payees.length == _shares.length, \"LENGTHS_NOT_EQUAL\");\n        require(_payees.length > 0, \"LENGTH_TOO_SHORT\");\n\n        title = _title;\n\n        for (uint256 i = 0; i < _payees.length; i++) {\n            _addPayee(_payees[i], _shares[i]);\n        }\n    }\n\n    /**\n     * @dev Triggers a transfer to `account` of the amount of token they are owed, according to their percentage of the\n     * total shares and their previous withdrawals.\n     */\n    function release(address token, address account) external virtual override {\n        require(shares[account] > 0, \"FORBIDDEN\");\n\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased[token];\n        uint256 payment = (totalReceived * shares[account]) / totalShares - released[token][account];\n\n        require(payment != 0, \"NO_PAYMENT\");\n\n        released[token][account] += payment;\n        totalReleased[token] += payment;\n\n        token.safeTransfer(account, payment);\n        emit PaymentReleased(token, account, payment);\n    }\n\n    function getBalance(address token, address account) external view override returns(uint256) {\n        require(shares[account] > 0, \"FORBIDDEN\");\n\n        uint256 totalReceived = token.balanceOf(address(this)) + totalReleased[token];\n        uint256 payment = (totalReceived * shares[account]) / totalShares - released[token][account];\n        return payment;\n    }\n\n    /**\n     * @dev Add a new payee to the contract.\n     * @param account The address of the payee to add.\n     * @param _shares The number of shares owned by the payee.\n     */\n    function _addPayee(address account, uint256 _shares) private {\n        require(account != address(0), \"INVALID_ADDRESS\");\n        require(_shares > 0, \"INVALID_SHARES\");\n        require(shares[account] == 0, \"ALREADY_ADDED\");\n\n        payees.push(account);\n        shares[account] = _shares;\n        totalShares = totalShares + _shares;\n        emit PayeeAdded(account, _shares);\n    }\n\n    receive() external payable virtual {\n        emit PaymentReceived(msg.sender, msg.value);\n    }\n}"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IPaymentSplitter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPaymentSplitter {\n    event PayeeAdded(address account, uint256 shares);\n    event PaymentReleased(address token, address to, uint256 amount);\n\n    function initialize(\n        string calldata _title,\n        address[] calldata _payees,\n        uint256[] calldata _shares\n    ) external;\n\n    function title() external view returns (string memory);\n\n    function totalShares() external view returns (uint256);\n\n    function totalReleased(address account) external view returns (uint256);\n\n    function shares(address account) external view returns (uint256);\n\n    function released(address token, address account) external view returns (uint256);\n\n    function payees(uint256 index) external view returns (address);\n\n    function release(address token, address account) external;\n\n    function getBalance(address token, address account) external view returns(uint256);\n}"
    },
    "contracts/libraries/TokenHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nlibrary TokenHelper {\n    using SafeERC20 for IERC20;\n\n    address public constant ETH = 0x0000000000000000000000000000000000000000;\n\n    function balanceOf(address token, address account) internal view returns (uint256) {\n        if (token == ETH) {\n            return account.balance;\n        } else {\n            return IERC20(token).balanceOf(account);\n        }\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 amount\n    ) internal {\n        if (token == ETH) {\n            (bool success, ) = to.call{value: amount}(\"\");\n            require(success, \"SHOYU: TRANSFER_FAILURE\");\n        } else {\n            IERC20(token).safeTransfer(to, amount);\n        }\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/CuratorEditions.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport {ISingleEditionMintableCreator} from \"./interfaces/ISingleEditionMintableCreator.sol\";\nimport {IPaymentSplitterFactory} from \"./interfaces/IPaymentSplitterFactory.sol\";\nimport {IPaymentSplitter} from \"./interfaces/IPaymentSplitter.sol\";\nimport {ISingleEditionMintable} from \"./interfaces/ISingleEditionMintable.sol\";\n\ncontract CuratorEditions {\n    event CreatedEdition(address editionContractAddress, uint256 editionId);\n    event PriceChanged(uint256 editionId, uint256 amount);\n    event EditionSold(uint256 editionId, uint256 price, address owner);\n\n    struct EditionData {\n        string name;\n        string symbol;\n        string description;\n        string animationUrl;\n        bytes32 animationHash;\n        string imageUrl;\n        bytes32 imageHash;\n        uint256 editionSize;\n        uint256 royaltyBPS;\n        uint256 salePrice;\n        address owner;\n    }\n\n    struct SplitData {\n        string title;\n        address[] payees;\n        uint256[] shares;\n    }\n\n    address public constant NATIVE_CURRENCY = 0x0000000000000000000000000000000000000000;\n    address public singleEditionMintableCreatorAddress;\n    address public paymentSplitterFactoryAddress;\n\n    mapping(uint256 => address) public editionIdToSplitter;\n    mapping(uint256 => uint256) public editionIdToSalePrice;\n    \n    constructor(address _singleEditionMintableCreatorAddress, address _paymentSplitterFactoryAddress) {\n        singleEditionMintableCreatorAddress = _singleEditionMintableCreatorAddress;\n        paymentSplitterFactoryAddress = _paymentSplitterFactoryAddress;\n    }   \n\n    function createCuratorEdition(\n        EditionData memory _editionData,\n        SplitData memory _splitData\n    ) external returns (uint256) {\n        ISingleEditionMintableCreator creator = ISingleEditionMintableCreator(singleEditionMintableCreatorAddress);\n        uint editionId = creator.createEdition(_editionData.name, _editionData.symbol, _editionData.description, _editionData.animationUrl, _editionData.animationHash, _editionData.imageUrl, _editionData.imageHash, _editionData.editionSize, _editionData.royaltyBPS, 0);\n        address splitter = IPaymentSplitterFactory(paymentSplitterFactoryAddress).deployPaymentSplitter(msg.sender, _splitData.title, _splitData.payees, _splitData.shares);\n\n        ISingleEditionMintable edition = creator.getEditionAtId(editionId);\n        edition.setApprovedMinter(address(this), true);\n        edition.transferOwnership(_editionData.owner);\n        editionIdToSplitter[editionId] = splitter;\n        editionIdToSalePrice[editionId] = _editionData.salePrice;\n\n        emit CreatedEdition(address(edition), editionId);\n        return (editionId);\n    }\n\n    function batchPurchase(uint256 _amount, uint256 _editionId) external payable {\n        address splitter = editionIdToSplitter[_editionId];\n        uint256 salePrice = editionIdToSalePrice[_editionId];\n        require(salePrice > 0, \"NOT_FOR_SALE\");\n        require(msg.value == (salePrice * _amount), \"INVALID_PRICE\");\n\n        ISingleEditionMintable edition = ISingleEditionMintableCreator(singleEditionMintableCreatorAddress).getEditionAtId(_editionId);\n        for(uint256 i; i < _amount; i++) {\n            edition.mintEdition(msg.sender);\n            emit EditionSold(_editionId, salePrice, msg.sender);\n        }\n        \n        (bool sent,) = payable(splitter).call{value: msg.value}(\"\");\n        require(sent, \"SPLITTER_ERROR\");\n    }\n\n    function purchase(uint256 _editionId) external payable returns (uint256) {\n        address splitter = editionIdToSplitter[_editionId];\n        uint256 salePrice = editionIdToSalePrice[_editionId];\n        require(salePrice > 0, \"NOT_FOR_SALE\");\n        require(msg.value == salePrice, \"INVALID_PRICE\");\n\n        ISingleEditionMintable edition = ISingleEditionMintableCreator(singleEditionMintableCreatorAddress).getEditionAtId(_editionId);\n        uint256 editionIndex = edition.mintEdition(msg.sender);\n        emit EditionSold(_editionId, salePrice, msg.sender);\n        \n        (bool sent,) = payable(splitter).call{value: msg.value}(\"\");\n        require(sent, \"SPLITTER_ERROR\");\n\n        return editionIndex;\n    }\n\n    function setSalePrice(uint256 _editionId, uint256 _salePrice) external {\n        ISingleEditionMintableCreator creator = ISingleEditionMintableCreator(singleEditionMintableCreatorAddress);\n        ISingleEditionMintable edition = creator.getEditionAtId(_editionId);\n        require(msg.sender == edition.owner(), \"FORBIDDEN\");\n        editionIdToSalePrice[_editionId] = _salePrice;\n        emit PriceChanged(_editionId, _salePrice);\n    }\n\n    function withdraw(uint256 _editionId) public {\n        IPaymentSplitter(editionIdToSplitter[_editionId]).release(NATIVE_CURRENCY, msg.sender);\n    }\n\n    function getBalance(uint256 _editionId) public view returns(uint256) {\n        return IPaymentSplitter(editionIdToSplitter[_editionId]).getBalance(NATIVE_CURRENCY, msg.sender);\n    } \n\n    function getEditionAddress(uint256 _editionId) public view returns(address) {\n        ISingleEditionMintableCreator creator = ISingleEditionMintableCreator(singleEditionMintableCreatorAddress);\n        return address(creator.getEditionAtId(_editionId));\n    }\n}"
    },
    "contracts/interfaces/ISingleEditionMintableCreator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\nimport {ISingleEditionMintable} from \"./ISingleEditionMintable.sol\";\n\ninterface ISingleEditionMintableCreator {\n    function createEdition(\n        string memory _name,\n        string memory _symbol,\n        string memory _description,\n        string memory _animationUrl,\n        bytes32 _animationHash,\n        string memory _imageUrl,\n        bytes32 _imageHash,\n        uint256 _editionSize,\n        uint256 _royaltyBPS,\n        uint256 _salePrice\n    ) external returns (uint256);\n\n    function getEditionAtId(uint256 editionId) external\n        view\n        returns (ISingleEditionMintable);\n}"
    },
    "contracts/interfaces/ISingleEditionMintable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.0;\n\ninterface ISingleEditionMintable {\n  function setApprovedMinter(address minter, bool allowed) external;\n  function mintEdition(address to) external returns (uint256);\n  function transferOwnership(address newOwner) external;\n  function owner() external view returns (address);\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}